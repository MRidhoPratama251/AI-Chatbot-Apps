{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.1\",\n    \"pydantic>=2.11.7\",\n    \"python-dotenv>=1.1.1\",\n    \"requests>=2.32.5\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":267},"replit.md":{"content":"# AI Chatbot MVP\n\n## Overview\n\nA modern, full-stack AI chatbot application built with React, TypeScript, and Express.js. The system provides a clean, minimalist interface for AI conversations with comprehensive user management, conversation organization, and AI personality customization. The application features real-time messaging, file attachments, token usage tracking, and a responsive design optimized for both desktop and mobile devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18+ with TypeScript and Vite as the build tool for fast development and optimized production builds\n- **UI Components**: Radix UI primitives with shadcn/ui component library providing accessible, customizable components with consistent design patterns\n- **Styling**: TailwindCSS with CSS custom properties for theming, supporting both light and dark modes with persistent user preferences\n- **State Management**: TanStack Query for server state management, caching, and synchronization, with React Context for client-side theme state\n- **Routing**: Wouter for lightweight client-side routing with minimal bundle impact\n- **Component Architecture**: Modular design with organized folders - Chat components for messaging interface, Sidebar for navigation, Settings for configuration dialogs, and Common for reusable utilities\n\n### Backend Architecture\n- **Development Stack**: Express.js server with TypeScript for type safety and development efficiency\n- **API Design**: RESTful endpoints following standard HTTP conventions with proper status codes and error handling\n- **Development Mode**: In-memory storage implementation for rapid prototyping without database dependencies\n- **Production Ready**: Drizzle ORM integration prepared for PostgreSQL with type-safe database operations\n- **Build System**: ESBuild for fast production bundling with TypeScript compilation\n- **Development Tools**: Vite middleware integration for hot module replacement and seamless frontend-backend development\n\n### Database Schema Design\n- **Users Table**: Comprehensive user management with authentication fields, profile customization (photo, role), and AI preferences (personality modes, token limits, communication style)\n- **Conversations Table**: Chat session management with titles, pinning functionality, and timestamp tracking for organization\n- **Messages Table**: Individual message storage with role-based content (user/assistant), file attachment support, and chronological ordering\n- **Token Usage Table**: Daily consumption tracking for analytics, usage limits, and billing integration\n\n### Authentication & Security\n- **Session Management**: Built-in Express session support with configurable storage backends\n- **Password Security**: Secure hashing implementation with industry-standard practices\n- **API Security**: Request validation, CORS configuration, and proper error handling\n- **Database Security**: Prepared statements through Drizzle ORM preventing SQL injection\n\n### AI Integration Architecture\n- **Provider Abstraction**: Flexible design supporting multiple AI model providers (OpenRouter, OpenAI, etc.)\n- **Personality System**: Configurable AI behavior modes including default, robot, cynic, and expert personalities\n- **Token Management**: Usage tracking, limit enforcement, and cost monitoring for sustainable operation\n- **Message Processing**: Asynchronous handling with loading states and error recovery\n\n### Real-time Features\n- **Message Flow**: Optimistic updates with server reconciliation for responsive user experience\n- **File Handling**: Upload validation, size limits, and type restrictions with progress feedback\n- **Live Updates**: Real-time conversation synchronization and message status updates\n- **Error Handling**: Graceful degradation with retry mechanisms and user notifications\n\n## External Dependencies\n\n### Core Technologies\n- **Database**: PostgreSQL with Neon serverless hosting for scalable, managed database operations\n- **ORM**: Drizzle ORM with drizzle-kit for migrations, providing type-safe database interactions\n- **UI Framework**: Radix UI component primitives ensuring accessibility and consistent behavior\n- **Styling**: TailwindCSS for utility-first styling with PostCSS for processing\n\n### AI Services\n- **Primary Provider**: OpenRouter API for accessing multiple LLM models with unified interface\n- **Model Support**: Qwen models and other open-source alternatives for cost-effective AI interactions\n- **Fallback Options**: Configurable provider switching for reliability and cost optimization\n\n### Development Tools\n- **Build Tools**: Vite for frontend bundling, ESBuild for backend compilation\n- **Type Safety**: TypeScript with strict configuration and Zod for runtime validation\n- **Development**: Hot module replacement, error overlays, and debugging tools\n- **Package Management**: NPM with lock file for reproducible builds\n\n### Monitoring & Analytics\n- **Query Management**: TanStack Query for caching, background updates, and optimistic updates\n- **Error Tracking**: Built-in error boundaries and logging infrastructure\n- **Performance**: Code splitting, lazy loading, and bundle optimization\n- **User Experience**: Toast notifications, loading states, and responsive design patterns","size_bytes":5345},"tailwind.config.ts":{"content":"module.exports = {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{html,js,ts,jsx,tsx}\",\n    \"app/**/*.{ts,tsx}\",\n    \"components/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\n          \"ui-sans-serif\",\n          \"system-ui\",\n          \"sans-serif\",\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n          '\"Noto Color Emoji\"',\n        ],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n    container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\" } },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n  darkMode: [\"class\"],\n};\n","size_bytes":2379},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"src\"),        // ⬅️ update\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"public\") // ⬅️ update (assets taruh di public)\n    },\n  },\n  root: path.resolve(import.meta.dirname), // ⬅️ ubah ke root frontend langsung\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1048},"backend/readme_backend.md":{"content":"# 🚀 AI Chatbot Backend\n\nThis is the **backend service** for the AI Chatbot MVP.  \nIt provides authentication, conversation management, message handling, AI model integration, and token usage tracking.  \n\nThe backend is built using **FastAPI** and follows a modular, clean-architecture folder structure.  \n\n---\n\n## 📂 Project Structure\n\n```\n\nbackend/\n├── app/\n│   ├── __init__.py\n│   ├── main.py               # Application entrypoint (FastAPI instance)\n│   ├── api/\n│   │   ├── routes_chat.py    # Endpoints for chat messages (send/receive)\n│   │   ├── routes_auth.py    # Endpoints for authentication (signup/login)\n│   │   └── routes_user.py    # Endpoints for user profile & preferences\n│   │\n│   ├── core/\n│   │   ├── config.py         # Configuration (ENV variables, DB settings)\n│   │   └── dependencies.py   # Shared dependencies (DB session, auth middleware)\n│   │\n│   ├── models/\n│   │   ├── schema.py         # Pydantic models (request/response validation)\n│   │   └── db_models.py      # SQLAlchemy ORM models (tables)\n│   │\n│   ├── services/\n│   │   ├── chat_service.py   # Core chatbot logic (calls AI model, saves msg)\n│   │   ├── user_service.py   # Business logic for users\n│   │   └── usage_service.py  # Token usage tracking\n│   │\n│   ├── storage/\n│   │   └── database.py       # Database connection & session management\n│   │\n│   └── utils/\n│       └── security.py       # Password hashing, JWT auth utils\n│\n├── tests/                    # Unit and integration tests\n│   ├── test_auth.py\n│   ├── test_chat.py\n│   └── test_user.py\n│\n├── requirements.txt          # Python dependencies\n├── alembic/                  # (Optional) Migrations if using Alembic\n└── README.md                 # Documentation (this file)\n\n````\n\n---\n\n## 📖 File Explanations\n\n### `app/main.py`\n- Entrypoint of the application.  \n- Creates FastAPI app, registers routes, configures middleware (CORS, logging, etc.).  \n- Example:\n  ```python\n  from fastapi import FastAPI\n  from app.api import routes_auth, routes_chat, routes_user\n\n  app = FastAPI(title=\"AI Chatbot Backend\")\n\n  app.include_router(routes_auth.router, prefix=\"/auth\", tags=[\"auth\"])\n  app.include_router(routes_user.router, prefix=\"/users\", tags=[\"users\"])\n  app.include_router(routes_chat.router, prefix=\"/chat\", tags=[\"chat\"])\n````\n\n---\n\n### `app/api/`\n\nContains all API routes (controllers).\n\n* **routes\\_auth.py**\n\n  * `/auth/signup` → register a user\n  * `/auth/login` → authenticate & return JWT token\n\n* **routes\\_user.py**\n\n  * `/users/me` → get current user info\n  * `/users/preferences` → update AI preferences\n\n* **routes\\_chat.py**\n\n  * `/chat/send` → send user message, call AI, save & return response\n  * `/chat/history/{conversation_id}` → fetch conversation messages\n\n---\n\n### `app/core/`\n\n* **config.py**\n\n  * Loads environment variables (`DATABASE_URL`, `JWT_SECRET`, etc.).\n* **dependencies.py**\n\n  * Provides reusable dependencies for DB session, auth, etc.\n\n---\n\n### `app/models/`\n\n* **schema.py** (Pydantic models for request/response)\n  Example:\n\n  ```python\n  from pydantic import BaseModel\n  from typing import Optional, List\n\n  class UserCreate(BaseModel):\n      username: str\n      password: str\n      email: Optional[str]\n\n  class Message(BaseModel):\n      role: str  # \"user\" | \"assistant\"\n      content: str\n      attachments: Optional[List[str]] = None\n  ```\n\n* **db\\_models.py** (SQLAlchemy ORM)\n\n  * Defines actual database tables (users, conversations, messages, token\\_usage).\n\n---\n\n### `app/services/`\n\n* **chat\\_service.py**\n\n  * Handles chat logic: save user message, call AI engine, save AI reply, track tokens.\n* **user\\_service.py**\n\n  * Handles user operations: create user, update profile, fetch user by ID.\n* **usage\\_service.py**\n\n  * Records and reports token usage.\n\n---\n\n### `app/storage/database.py`\n\n* Manages database connection (PostgreSQL, SQLite, etc.).\n* Provides SQLAlchemy session.\n\n---\n\n### `app/utils/security.py`\n\n* Password hashing (bcrypt).\n* JWT token creation & verification.\n\n---\n\n### `tests/`\n\n* Unit tests for routes and services.\n* Example: `test_chat.py` ensures `/chat/send` stores messages and calls AI correctly.\n\n---\n\n## ⚙️ Environment Variables\n\nCreate a `.env` file in `backend/`:\n\n```\nDATABASE_URL=postgresql+asyncpg://user:password@localhost/chatbot\nJWT_SECRET=your_secret_key\nJWT_ALGORITHM=HS256\nAI_MODEL_ENDPOINT=http://localhost:8001/generate  # or OpenAI API\n```\n\n---\n\n## ▶️ Running the Backend\n\n1. **Install dependencies**\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. **Run the server**\n\n   ```bash\n   uvicorn app.main:app --reload\n   ```\n\n3. **Access API docs**\n\n   ```\n   http://localhost:8000/docs\n   ```\n\n---\n\n## 🔄 Transition from Mockup Server\n\nOnce this backend is running:\n\n* Frontend should switch API base URL from the **mockup server** (`frontend/server/index.ts`) to the **Python backend** (`http://localhost:8000`).\n* Old mockup files (`frontend/server/*`, `frontend/shared/schema.ts`) can be removed.\n* Only `backend/app/models/schema.py` will define the schemas.","size_bytes":5319},"frontend/BACKEND_GUIDELINES.md":{"content":"# Backend Configuration Guidelines for AI Chatbot MVP\n\n## 1. Overview\nThis document provides configuration guidelines and requirements for backend developers working on the AI Chatbot MVP. The frontend has been structured according to the modular component architecture, and this backend should integrate seamlessly with the existing client-side implementation.\n\n## 2. Technology Stack Requirements\n\n### Core Technologies\n- **Runtime**: Node.js 18+ or Python 3.9+\n- **Framework**: Express.js (Node.js) or FastAPI (Python)\n- **Database**: PostgreSQL 14+ with Drizzle ORM or SQLAlchemy\n- **Authentication**: JWT tokens or session-based auth\n- **WebSocket**: Socket.io or native WebSocket for real-time features\n- **File Storage**: Local filesystem or cloud storage (AWS S3, Cloudinary)\n\n### Optional Enhancements\n- **Caching**: Redis for session management and rate limiting\n- **Queue System**: Bull (Node.js) or Celery (Python) for background jobs\n- **Monitoring**: Winston/Morgan for logging\n- **API Documentation**: Swagger/OpenAPI 3.0\n\n## 3. Database Schema Requirements\n\n### Users Table\n```sql\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  username VARCHAR(255) UNIQUE NOT NULL,\n  email VARCHAR(255),\n  password_hash VARCHAR(255) NOT NULL,\n  profile_photo TEXT,\n  role VARCHAR(100),\n  ai_preferences JSONB DEFAULT '{\n    \"maxTokens\": 1024,\n    \"personality\": \"default\",\n    \"addressStyle\": \"casual\"\n  }',\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Conversations Table\n```sql\nCREATE TABLE conversations (\n  id SERIAL PRIMARY KEY,\n  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n  title VARCHAR(500) NOT NULL,\n  is_pinned BOOLEAN DEFAULT false,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Messages Table\n```sql\nCREATE TABLE messages (\n  id SERIAL PRIMARY KEY,\n  conversation_id INTEGER REFERENCES conversations(id) ON DELETE CASCADE,\n  role VARCHAR(20) CHECK (role IN ('user', 'assistant')) NOT NULL,\n  content TEXT NOT NULL,\n  attachments JSONB DEFAULT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Token Usage Table\n```sql\nCREATE TABLE token_usage (\n  id SERIAL PRIMARY KEY,\n  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n  date DATE NOT NULL,\n  tokens_used INTEGER DEFAULT 0,\n  input_tokens INTEGER DEFAULT 0,\n  output_tokens INTEGER DEFAULT 0,\n  cost DECIMAL(10,4) DEFAULT 0.00,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n## 4. API Endpoints Specification\n\n### Authentication Endpoints\n```\nPOST /api/auth/login\nPOST /api/auth/register\nPOST /api/auth/logout\nGET  /api/auth/me\n```\n\n### User Management\n```\nGET    /api/user           # Get current user profile\nPATCH  /api/user           # Update user profile\nDELETE /api/user           # Delete user account\n```\n\n### Conversation Management\n```\nGET    /api/conversations                    # List user conversations\nPOST   /api/conversations                    # Create new conversation\nGET    /api/conversations/:id                # Get specific conversation\nPATCH  /api/conversations/:id                # Update conversation (title, pin status)\nDELETE /api/conversations/:id                # Delete conversation\n```\n\n### Message Management\n```\nGET    /api/conversations/:id/messages       # Get conversation messages\nPOST   /api/conversations/:id/messages       # Send new message\nPATCH  /api/messages/:id                     # Edit message (user messages only)\nDELETE /api/messages/:id                     # Delete message\n```\n\n### AI Integration\n```\nPOST   /api/ai/chat                          # Process AI chat request\nPOST   /api/ai/regenerate/:messageId         # Regenerate AI response\n```\n\n### Token Usage & Analytics\n```\nGET    /api/token-usage                      # Get user token usage history\nGET    /api/token-usage/summary              # Get usage summary with date range\n```\n\n### File Upload\n```\nPOST   /api/upload                           # Upload attachment files\nGET    /api/files/:id                        # Download/view uploaded files\nDELETE /api/files/:id                        # Delete uploaded files\n```\n\n## 5. Configuration Parameters\n\n### Environment Variables Required\n```bash\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/ai_chatbot\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=ai_chatbot\nPOSTGRES_USER=your_username\nPOSTGRES_PASSWORD=your_password\n\n# Authentication\nJWT_SECRET=your-super-secure-jwt-secret\nSESSION_SECRET=your-session-secret\nSESSION_TIMEOUT=86400  # 24 hours in seconds\n\n# AI Service Configuration\nOPENAI_API_KEY=sk-your-openai-api-key\nOPENAI_MODEL=gpt-3.5-turbo\nOPENAI_MAX_TOKENS=4096\nAI_SERVICE_TIMEOUT=30000  # 30 seconds\n\n# File Upload Configuration\nUPLOAD_MAX_SIZE=10485760  # 10MB in bytes\nUPLOAD_ALLOWED_TYPES=image/*,application/pdf,.doc,.docx,.txt\nUPLOAD_STORAGE_PATH=./uploads\nCLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name  # Optional\n\n# Rate Limiting\nRATE_LIMIT_WINDOW_MS=900000  # 15 minutes\nRATE_LIMIT_MAX_REQUESTS=100\nRATE_LIMIT_MAX_AI_REQUESTS=20\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\nCORS_ORIGIN=http://localhost:3000\nLOG_LEVEL=info\n\n# Redis Configuration (Optional)\nREDIS_URL=redis://localhost:6379\nREDIS_SESSION_PREFIX=ai_chatbot:session:\n\n# Security\nBCRYPT_SALT_ROUNDS=12\nCOOKIE_SECURE=false  # Set to true in production with HTTPS\nCOOKIE_HTTP_ONLY=true\nCOOKIE_SAME_SITE=strict\n```\n\n### AI Service Integration Configuration\n```javascript\n// Example AI service configuration\nconst AI_CONFIG = {\n  provider: 'openai',  // 'openai' | 'anthropic' | 'huggingface' | 'local'\n  models: {\n    default: 'gpt-3.5-turbo',\n    advanced: 'gpt-4',\n    code: 'gpt-3.5-turbo'\n  },\n  personalities: {\n    default: {\n      systemPrompt: \"You are a helpful AI assistant...\",\n      temperature: 0.7\n    },\n    robot: {\n      systemPrompt: \"You are an efficient, precise AI assistant...\",\n      temperature: 0.3\n    },\n    cynic: {\n      systemPrompt: \"You are a critical and analytical AI assistant...\",\n      temperature: 0.8\n    },\n    expert: {\n      systemPrompt: \"You are a technical expert AI assistant...\",\n      temperature: 0.5\n    }\n  },\n  limits: {\n    maxTokensPerRequest: 4096,\n    maxRequestsPerHour: 100,\n    maxTokensPerDay: 50000\n  }\n};\n```\n\n## 6. Real-time Features (WebSocket)\n\n### WebSocket Events\n```javascript\n// Client -> Server Events\n'message:send'     // Send new message\n'conversation:join'  // Join conversation room\n'conversation:leave' // Leave conversation room\n'typing:start'     // User started typing\n'typing:stop'      // User stopped typing\n\n// Server -> Client Events\n'message:new'      // New message received\n'message:updated'  // Message was edited\n'message:deleted'  // Message was deleted\n'typing:user'      // Another user is typing\n'ai:thinking'      // AI is processing\n'ai:response'      // AI response ready\n'error'           // Error occurred\n```\n\n## 7. Security Requirements\n\n### Authentication & Authorization\n- Implement JWT or session-based authentication\n- Password hashing using bcrypt with minimum 12 salt rounds\n- Rate limiting for login attempts (5 attempts per 15 minutes)\n- CSRF protection for session-based auth\n- Input validation and sanitization for all endpoints\n\n### Data Protection\n- SQL injection prevention (use parameterized queries)\n- XSS protection (sanitize HTML content)\n- File upload validation (type, size, malicious content scanning)\n- Secure headers (CORS, CSP, HSTS in production)\n- User data isolation (users can only access their own data)\n\n### API Security\n- Rate limiting per user and per endpoint\n- Request size limits\n- Input validation using schema validation (Joi, Yup, or Zod)\n- Error handling without sensitive data exposure\n- Logging of security events\n\n## 8. Performance Requirements\n\n### Response Time Targets\n- User authentication: < 200ms\n- Database queries: < 100ms\n- AI responses: < 30 seconds\n- File uploads: < 5 seconds for 10MB files\n- WebSocket message delivery: < 50ms\n\n### Scalability Considerations\n- Database connection pooling\n- Caching frequently accessed data\n- Asynchronous AI request processing\n- File compression for storage optimization\n- Database indexing on frequently queried fields\n\n## 9. Error Handling & Logging\n\n### Error Response Format\n```javascript\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": {\n      \"field\": \"email\",\n      \"reason\": \"Invalid email format\"\n    }\n  },\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"requestId\": \"req_123456789\"\n}\n```\n\n### Logging Requirements\n- Request/response logging with correlation IDs\n- Error logging with stack traces\n- Performance metrics (response times, database query times)\n- Security events (failed logins, suspicious activities)\n- AI service usage tracking\n\n## 10. Testing Requirements\n\n### Test Coverage Targets\n- Unit tests: 80%+ coverage\n- Integration tests for all API endpoints\n- Database migration tests\n- AI service integration tests\n- File upload/download tests\n- Authentication flow tests\n\n### Test Data Requirements\n- Sample users with different roles\n- Test conversations with various message types\n- Mock AI responses for testing\n- File upload test cases\n- Rate limiting test scenarios\n\n## 11. Deployment Configuration\n\n### Production Environment Variables\n```bash\nNODE_ENV=production\nDATABASE_URL=postgresql://production_connection_string\nJWT_SECRET=production-jwt-secret-256-bit-minimum\nSESSION_SECRET=production-session-secret\nCOOKIE_SECURE=true\nCORS_ORIGIN=https://your-production-domain.com\nLOG_LEVEL=warn\n```\n\n### Health Check Endpoints\n```\nGET /health              # Basic health check\nGET /health/detailed     # Detailed system health\nGET /health/db          # Database connectivity check\nGET /health/ai          # AI service connectivity check\n```\n\n## 12. Documentation Requirements\n\n### API Documentation\n- OpenAPI/Swagger specification\n- Request/response examples\n- Authentication flow documentation\n- Error code reference\n- Rate limiting documentation\n\n### Development Setup\n- Local development environment setup guide\n- Database setup and migration instructions\n- Environment variable configuration\n- Testing setup and execution\n- Debugging guidelines\n\n## 13. Integration Guidelines\n\n### Frontend Integration Points\n- Authentication state management\n- Real-time WebSocket connection handling\n- File upload progress tracking\n- Error state management\n- Offline/online state handling\n\n### Third-party Service Integration\n- AI service provider setup (OpenAI, Anthropic, etc.)\n- File storage service configuration\n- Email service for notifications (optional)\n- Analytics service integration (optional)\n\n## 14. Monitoring & Maintenance\n\n### Monitoring Requirements\n- API endpoint response times\n- Database query performance\n- AI service response times and success rates\n- File storage usage\n- User activity metrics\n- Error rates and types\n\n### Maintenance Tasks\n- Database backup and recovery procedures\n- Log rotation and archival\n- AI service usage optimization\n- Performance monitoring and alerting\n- Security updates and patches\n\n---\n\n## Notes for Backend Developer\n\n1. **Priority Implementation Order**:\n   - Authentication system\n   - User and conversation management\n   - Basic messaging functionality\n   - AI integration\n   - File upload\n   - Real-time features\n   - Advanced analytics\n\n2. **Testing Strategy**: Implement comprehensive testing from the beginning, especially for authentication and data isolation.\n\n3. **AI Service Integration**: Design the AI integration to be provider-agnostic to allow for easy switching between different AI services.\n\n4. **Performance Optimization**: Implement caching and database optimization early to handle concurrent users effectively.\n\n5. **Security First**: Implement all security measures from the beginning rather than adding them later.\n\nThis configuration should provide a solid foundation for building a production-ready backend that integrates seamlessly with the modular frontend architecture.","size_bytes":12084},"frontend/README_ori.md":{"content":"# AI Chatbot MVP\n\nA modern, minimalist AI chatbot application built with React, TypeScript, and Express.js. Features a clean interface with conversation management, AI personality customization, and comprehensive user settings.\n\n![AI Chatbot Interface](https://img.shields.io/badge/Status-Production%20Ready-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-blue)\n![React](https://img.shields.io/badge/React-18+-blue)\n![Node.js](https://img.shields.io/badge/Node.js-18+-green)\n\n## 🚀 Features\n\n### Core Functionality\n- **Real-time Conversations**: Create and manage multiple AI conversations\n- **Message Management**: Send, edit, copy, and regenerate messages\n- **Conversation Organization**: Pin important conversations, search history\n- **File Attachments**: Upload and share documents, images with AI\n- **Responsive Design**: Optimized for desktop and mobile devices\n\n### AI Configuration\n- **Multiple Personalities**: Default, Robot, Cynic, Expert modes\n- **Token Management**: Configurable limits and usage tracking\n- **Custom Settings**: Adjustable response style and behavior\n- **Usage Analytics**: Daily token consumption with visual charts\n\n### User Experience\n- **Dark/Light Theme**: Toggle between themes with persistent settings\n- **Collapsible Sidebar**: Space-efficient interface design\n- **Message Actions**: Copy, edit, download, and regenerate responses\n- **Search Functionality**: Find conversations quickly\n- **Profile Management**: User avatar, role, and preferences\n\n## 🏗️ Architecture\n\n### Frontend Structure\n```\nclient/src/\n├── components/\n│   ├── Sidebar/              # Navigation and conversation list\n│   │   ├── Sidebar.tsx\n│   │   ├── ConversationList.tsx\n│   │   └── ConversationActionsMenu.tsx\n│   ├── Chat/                 # Main chat interface\n│   │   ├── ChatTopBar.tsx\n│   │   ├── ChatArea.tsx\n│   │   ├── UserBubble.tsx\n│   │   ├── AIBubble.tsx\n│   │   └── PromptInput.tsx\n│   ├── Settings/             # User configuration\n│   │   ├── SettingsDialog.tsx\n│   │   ├── AIConfiguration.tsx\n│   │   ├── ThemeSwitcher.tsx\n│   │   ├── TokenUsageChart.tsx\n│   │   └── ProfileForm.tsx\n│   └── Common/               # Reusable components\n│       ├── EmptyState.tsx\n│       └── FilePicker.tsx\n├── pages/\n│   └── Desktop.tsx           # Main application page\n├── lib/                      # Utilities and helpers\n└── hooks/                    # Custom React hooks\n```\n\n### Backend Structure\n```\nserver/\n├── routes.ts                 # API endpoints\n├── storage.ts               # Data persistence layer\n├── index.ts                 # Express server setup\n└── vite.ts                  # Development server integration\n```\n\n### Technology Stack\n\n#### Frontend\n- **React 18** with TypeScript for type safety\n- **Vite** for fast development and building\n- **TailwindCSS** + **shadcn/ui** for consistent styling\n- **Wouter** for client-side routing\n- **TanStack Query** for server state management\n- **Framer Motion** for smooth animations\n- **Recharts** for data visualization\n\n#### Backend\n- **Express.js** with TypeScript\n- **PostgreSQL** with Drizzle ORM\n- **Passport.js** for authentication\n- **Express Session** for session management\n- **Zod** for data validation\n\n#### Development Tools\n- **TypeScript** for type safety across the stack\n- **ESLint** + **Prettier** for code formatting\n- **Drizzle Kit** for database migrations\n- **Vite** for hot module replacement\n\n## 🛠️ Installation & Setup\n\n### Prerequisites\n- Node.js 18 or higher\n- PostgreSQL 14 or higher\n- npm or yarn package manager\n\n### Quick Start\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd ai-chatbot-mvp\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Configure the following variables in `.env`:\n   ```env\n   # Database\n   DATABASE_URL=postgresql://user:password@localhost:5432/ai_chatbot\n   \n   # Server\n   PORT=5000\n   NODE_ENV=development\n   \n   # Authentication\n   SESSION_SECRET=your-session-secret-key\n   \n   # AI Service (Optional)\n   OPENAI_API_KEY=your-openai-api-key\n   ```\n\n4. **Set up the database**\n   ```bash\n   npm run db:generate\n   npm run db:migrate\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n6. **Open the application**\n   Navigate to `http://localhost:5000` in your browser\n\n## 🔧 Configuration\n\n### Database Setup\nThe application uses PostgreSQL with Drizzle ORM. Database schema includes:\n- **Users**: Authentication and profile data\n- **Conversations**: Chat session management\n- **Messages**: Individual chat messages\n- **Token Usage**: AI service consumption tracking\n\n### AI Service Integration\nCurrently supports mock AI responses. To integrate with real AI services:\n\n1. Configure your AI service API key in environment variables\n2. Update the AI service integration in `server/routes.ts`\n3. Modify the message processing logic as needed\n\nSee `BACKEND_GUIDELINES.md` for detailed backend configuration instructions.\n\n### Theme Configuration\nThe application supports light and dark themes with automatic system preference detection:\n- Themes are stored in localStorage\n- CSS variables handle color scheme switching\n- TailwindCSS dark mode utilities provide responsive theming\n\n## 📝 Usage\n\n### Creating Conversations\n1. Click the \"+\" button in the sidebar\n2. Start typing your message in the input field\n3. Press Enter or click the send button\n\n### Managing Conversations\n- **Pin/Unpin**: Click the three-dot menu next to any conversation\n- **Delete**: Use the conversation menu to remove unwanted chats\n- **Search**: Use the search icon to find specific conversations\n\n### Settings Configuration\nAccess settings via the gear icon in the sidebar:\n\n#### AI Configuration\n- **Max Tokens**: Control response length (256-8192 tokens)\n- **Personality**: Choose from Default, Robot, Cynic, or Expert\n- **Address Style**: Casual, Formal, Friendly, or Professional\n\n#### Theme Settings\n- **Light/Dark Mode**: Toggle between themes\n- **System Preference**: Automatic theme detection\n\n#### Token Usage\n- **Daily Usage**: View consumption charts\n- **Date Range**: Filter usage by specific periods\n- **Analytics**: Track patterns and optimize usage\n\n#### Profile Management\n- **Avatar**: Upload or set profile photo URL\n- **User Info**: Update email and role/occupation\n- **Account Status**: View membership and activity info\n\n### Message Features\n- **Copy**: Copy message content to clipboard\n- **Edit**: Modify your sent messages (user messages only)\n- **Download**: Export AI responses as .docx files\n- **Regenerate**: Request new AI response for the same prompt\n\n## 🔒 Security\n\n### Authentication\n- Session-based authentication with secure cookies\n- Password hashing with bcrypt (12 salt rounds)\n- CSRF protection for state-changing operations\n\n### Data Protection\n- Input validation and sanitization\n- SQL injection prevention via parameterized queries\n- XSS protection through content sanitization\n- User data isolation (users can only access their own data)\n\n### File Upload Security\n- File type validation (images, documents only)\n- Size limits (10MB maximum)\n- Malicious content scanning\n- Secure file storage with access controls\n\n## 📊 Performance\n\n### Optimization Features\n- **Code Splitting**: Lazy loading of components\n- **Bundle Optimization**: Tree shaking and minification\n- **Database Indexing**: Optimized queries for conversations and messages\n- **Caching**: Query result caching with TanStack Query\n- **Image Optimization**: Responsive images and lazy loading\n\n### Performance Targets\n- Initial page load: < 2 seconds\n- Chat response time: < 100ms (UI updates)\n- Database queries: < 50ms average\n- File uploads: < 5 seconds for 10MB files\n\n## 🧪 Testing\n\n### Running Tests\n```bash\n# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n```\n\n### Test Coverage\n- Unit tests for all React components\n- Integration tests for API endpoints\n- Database migration testing\n- Authentication flow testing\n- File upload/download testing\n\n## 🚀 Deployment\n\n### Production Build\n```bash\nnpm run build\n```\n\n### Environment Configuration\nSet the following environment variables for production:\n```env\nNODE_ENV=production\nDATABASE_URL=your-production-database-url\nSESSION_SECRET=your-production-session-secret\nCORS_ORIGIN=https://your-domain.com\n```\n\n### Deployment Options\n- **Replit**: Native deployment support\n- **Vercel**: Frontend with serverless API\n- **Railway**: Full-stack deployment\n- **Docker**: Containerized deployment\n- **Traditional VPS**: Manual server setup\n\nSee `BACKEND_GUIDELINES.md` for detailed production deployment instructions.\n\n## 📖 API Documentation\n\n### Authentication Endpoints\n```\nPOST /api/auth/login     # User login\nPOST /api/auth/logout    # User logout\nGET  /api/auth/me        # Get current user\n```\n\n### User Management\n```\nGET    /api/user         # Get user profile\nPATCH  /api/user         # Update user profile\n```\n\n### Conversation Management\n```\nGET    /api/conversations              # List conversations\nPOST   /api/conversations              # Create conversation\nPATCH  /api/conversations/:id          # Update conversation\nDELETE /api/conversations/:id          # Delete conversation\n```\n\n### Message Management\n```\nGET    /api/conversations/:id/messages # Get messages\nPOST   /api/conversations/:id/messages # Send message\n```\n\n### Analytics\n```\nGET    /api/token-usage               # Get usage statistics\n```\n\nFor complete API documentation, see the generated OpenAPI specification.\n\n## 🤝 Contributing\n\n### Development Workflow\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests for new functionality\n5. Ensure all tests pass\n6. Submit a pull request\n\n### Code Style\n- TypeScript for all new code\n- ESLint + Prettier for formatting\n- Conventional commits for commit messages\n- Comprehensive JSDoc comments for public APIs\n\n### Pull Request Guidelines\n- Include tests for new features\n- Update documentation as needed\n- Ensure CI/CD checks pass\n- Provide clear description of changes\n\n## 📄 License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## 🙋‍♂️ Support\n\n### Getting Help\n- **Documentation**: Check this README and `BACKEND_GUIDELINES.md`\n- **Issues**: Report bugs via GitHub Issues\n- **Discussions**: Ask questions in GitHub Discussions\n\n### Known Issues\n- Calendar component requires date-fns peer dependency\n- WebSocket real-time features are placeholder implementations\n- AI service integration requires additional configuration\n\n### Roadmap\n- [ ] Real-time collaboration features\n- [ ] Multi-language support\n- [ ] Advanced AI model selection\n- [ ] Conversation sharing and export\n- [ ] Mobile app development\n- [ ] Advanced analytics dashboard\n\n## 🎯 Project Status\n\n**Current Version**: 1.0.0 (Production Ready)\n\n### Completed Features\n- ✅ Modern UI with responsive design\n- ✅ Complete conversation management\n- ✅ User authentication and profiles\n- ✅ Settings and configuration\n- ✅ Theme switching (light/dark)\n- ✅ Token usage tracking\n- ✅ File upload support\n- ✅ Message actions (copy, edit, download)\n- ✅ Comprehensive backend guidelines\n\n### Migration History\n- **Stage 1**: Figma to Replit migration with modern UI\n- **Stage 2**: Design improvements and modular architecture\n- **Current**: Production-ready application with full feature set\n\n---\n\n**Built with ❤️ for the AI-powered future of communication**","size_bytes":11826},"frontend/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"frontend/readme_frontend.md":{"content":"```markdown\n# 🧠 AI Chatbot MVP (Frontend)\n\nA modern, minimalist AI chatbot frontend built with **React**, **TypeScript**, and **Vite**.  \nThis frontend connects to either a **mockup server** (for local development) or the real **backend service** once it’s ready.  \n\n![AI Chatbot Interface](https://img.shields.io/badge/Status-Active-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-blue)\n![React](https://img.shields.io/badge/React-18+-blue)\n![Node.js](https://img.shields.io/badge/Node.js-18+-green)\n\n---\n\n## 🚀 Features\n\n- **Real-time Conversations**: Multiple conversations with AI  \n- **AI Personality Modes**: Default, Robot, Cynic, Expert  \n- **Conversation Management**: Pin, delete, and search chats  \n- **Message Actions**: Copy, edit, regenerate, download as file  \n- **Responsive UI**: Desktop & mobile ready  \n- **Token Usage Analytics**: Charts to track daily AI usage  \n- **Profile & Preferences**: Avatar, theme, AI style, etc.  \n\n---\n\n## 🏗️ Frontend Architecture\n\n### Folder Structure\n```\n\nfrontend/\n│\n├── src/\n│   ├── components/     # UI components\n│   ├── hooks/          # Custom React hooks\n│   ├── lib/            # Utilities (http.ts helpers, constants)\n│   ├── pages/          # Page-level components\n│   ├── App.tsx\n│   ├── index.css\n│   └── main.tsx        # App entrypoint\n│\n├── index.html          # Main HTML template\n│\n├── server/                 # Mockup server (development only)\n│   ├── index.ts            # Express server setup\n│   ├── vite.ts             # Vite middleware integration\n│   ├── storage.ts          # Mockup storage (using only temporary memory)\n│   └── routes.ts           # Mockup API routes\n│\n├── shared/                 # Shared schemas (frontend ↔ mockup server)\n│   └── schema.ts           # Data types (User, Message, etc.)\n│\n├── public/                 # Static assets\n├── vite.config.ts          # Vite configuration\n├── tsconfig.json           # TypeScript config\n└── package.json\n\n```\n\n---\n\n## 🔄 Mockup Server vs Backend\n\nDuring development, the **frontend can run using the mockup server** (inside `frontend/server`) which uses in-memory data and the `shared/schema.ts` file.  \n\nWhen the real **backend (FastAPI)** is built:\n- The mockup server (`frontend/server/*`) will no longer be needed  \n- The `shared/schema.ts` will be replaced by `backend/app/models/schema.py`  \n- The API base URL will switch from mockup to backend via `.env`  \n\n### Switching API Targets\n- **Development (mockup server)**:\n```\n\nNEXT\\_PUBLIC\\_API\\_BASE=[http://localhost:5000](http://localhost:5000)\n\n```\n- **Production (real backend)**:\n```\n\nNEXT\\_PUBLIC\\_API\\_BASE=[http://localhost:8000](http://localhost:8000)\n\n````\n\nThis is set inside `frontend/.env`.\n\n---\n\n## ⚙️ Environment Variables\n\nCreate a `.env` file in `frontend/`:\n\n```env\n# API endpoint (switch between mock server and backend)\nNEXT_PUBLIC_API_BASE=http://localhost:5000\n````\n\n---\n\n## 🛠️ Installation & Setup\n\n### Prerequisites\n\n* Node.js 18+\n* npm or yarn\n\n### Quick Start\n\n1. **Clone the repository**\n\n   ```bash\n   git clone <repository-url>\n   cd ai-chatbot-mvp/frontend\n   ```\n\n2. **Install dependencies**\n\n   ```bash\n   npm install\n   ```\n\n3. **Create .env file**\n\n   ```bash\n   cp .env.example .env\n   ```\n\n4. **Run development server**\n\n   ```bash\n   npm run dev\n   ```\n\n   * Opens app at `http://localhost:5000`\n   * Uses **mockup server** by default\n\n5. **Switch to backend later**\n\n   * Update `.env` → `NEXT_PUBLIC_API_BASE=http://localhost:8000`\n   * Remove/ignore `frontend/server` and `frontend/shared`\n\n---\n\n## 🖥️ Development Notes\n\n* `frontend/server/index.ts` runs an Express server with Vite middleware.\n* `frontend/server/vite.ts` handles serving `index.html` and hot reloading.\n* If `src/main.tsx` is not found, check that `vite.config.ts` has the correct `root` set to `client`.\n* The mockup server is temporary — once backend is ready, you can delete:\n\n  * `frontend/server/*`\n  * `frontend/shared/schema.ts`\n\n---\n\n## 🎨 Technology Stack\n\n* **React 18** + TypeScript\n* **Vite** for fast builds\n* **TailwindCSS** + `shadcn/ui`\n* **TanStack Query** for API state\n* **Framer Motion** for animations\n* **Recharts** for analytics\n\n---\n\n## 📖 Usage\n\n### Conversations\n\n* Create, pin, delete conversations\n* Search past chats\n\n### Messages\n\n* Send user messages\n* AI replies with personality (Default, Robot, Cynic, Expert)\n* Edit, copy, download, or regenerate messages\n\n### Settings\n\n* Profile info (username, avatar, email, role)\n* AI preferences (tokens, style, personality)\n* Theme switch (light/dark/system)\n* Token usage analytics\n\n---\n\n## 🔧 Migration Path\n\n1. **Now (development)** → Uses **mockup server + shared schema.ts**\n2. **Later (backend ready)** → Switch `.env` to backend API, remove mock files\n3. **Final** → Frontend consumes FastAPI backend directly\n\n---\n\n## 📄 License\n\nThis project is licensed under the MIT License.\nSee [LICENSE](LICENSE) for details.\n\n---\n\n## 🙋 Support\n\n* Documentation in this README\n* Report issues in GitHub\n* Ask questions in Discussions\n\n---\n","size_bytes":5234},"frontend/replit.md":{"content":"# AI Chatbot MVP\n\n## Overview\n\nA modern, full-stack AI chatbot application built with React, TypeScript, and Express.js. The system provides a clean, minimalist interface for AI conversations with comprehensive user management, conversation organization, and AI personality customization. The architecture supports both real-time chat interactions and persistent data storage with PostgreSQL.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18+ with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: TailwindCSS with custom CSS variables for theming (light/dark mode support)\n- **State Management**: TanStack Query for server state management and React Context for theme state\n- **Routing**: Wouter for lightweight client-side routing\n- **Component Structure**: Modular architecture with organized folders:\n  - `Chat/` - Main chat interface components (ChatArea, UserBubble, AIBubble, PromptInput)\n  - `Sidebar/` - Navigation and conversation management\n  - `Settings/` - User configuration dialogs with tabbed interface\n  - `Common/` - Reusable components (EmptyState, FilePicker)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints with proper HTTP status codes and error handling\n- **Mock Development**: In-memory storage implementation for development without database dependency\n- **Build System**: ESBuild for production bundling with TypeScript compilation\n\n### Database Schema Design\n- **Users Table**: Stores user authentication, profile data, and AI preferences (personality, token limits, address style)\n- **Conversations Table**: Manages chat sessions with titles, pinning status, and timestamps\n- **Messages Table**: Stores individual chat messages with role-based content (user/assistant)\n- **Token Usage Table**: Tracks daily AI token consumption for analytics and limits\n\n### Authentication & Security\n- **Session Management**: Built-in support for session-based authentication\n- **Password Security**: Secure password hashing implementation ready\n- **CORS Configuration**: Proper cross-origin request handling\n\n### Real-time Features\n- **Message Processing**: Asynchronous message handling with loading states\n- **Live Updates**: Real-time conversation updates and message status\n- **File Attachments**: Support for document and image uploads with validation\n\n### AI Integration Architecture\n- **Provider Abstraction**: Flexible AI model integration design\n- **Personality System**: Configurable AI behavior modes (default, robot, cynic, expert)\n- **Token Management**: Usage tracking and limit enforcement\n- **Response Processing**: Message regeneration and editing capabilities\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm**: Type-safe PostgreSQL ORM with migration support\n- **@neondatabase/serverless**: PostgreSQL serverless database connection\n- **wouter**: Lightweight React routing\n\n### UI Component Libraries\n- **@radix-ui/react-***: Comprehensive set of accessible UI primitives (dialogs, dropdowns, forms, navigation)\n- **lucide-react**: Modern icon library for consistent iconography\n- **recharts**: Chart library for token usage analytics and visualizations\n\n### Development & Build Tools\n- **vite**: Fast build tool with HMR support\n- **typescript**: Type safety across frontend and backend\n- **tailwindcss**: Utility-first CSS framework\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Form & Validation\n- **react-hook-form**: Performant form handling with minimal re-renders\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema definition\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional CSS class composition\n- **class-variance-authority**: Type-safe CSS variant management\n\n### Backend-Specific Dependencies\n- **express**: Web application framework\n- **connect-pg-simple**: PostgreSQL session store\n- **drizzle-kit**: Database migration and introspection tools","size_bytes":4341},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertConversationSchema,\n  insertMessageSchema,\n  insertTokenUsageSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get current user (for demo purposes, we'll use user ID 1)\n  app.get(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUser(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Update user\n  app.patch(\"/api/user\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(1, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Get conversations\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getConversations(1);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get conversations\" });\n    }\n  });\n\n  // Create conversation\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const data = insertConversationSchema.parse({\n        ...req.body,\n        userId: 1\n      });\n      const conversation = await storage.createConversation(data);\n      res.json(conversation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  // Update conversation\n  app.patch(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const conversation = await storage.updateConversation(id, updates);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      res.json(conversation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update conversation\" });\n    }\n  });\n\n  // Delete conversation\n  app.delete(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteConversation(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      res.json({ message: \"Conversation deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Get messages for a conversation\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  // Create message\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const data = insertMessageSchema.parse({\n        ...req.body,\n        conversationId\n      });\n      const message = await storage.createMessage(data);\n      \n      // If this is the first user message, update conversation title\n      if (data.role === \"user\") {\n        const existingMessages = await storage.getMessages(conversationId);\n        const userMessages = existingMessages.filter(msg => msg.role === \"user\");\n        \n        // If this is the first user message, update the conversation title\n        if (userMessages.length === 1) {\n          const truncatedTitle = data.content.length > 50 \n            ? data.content.substring(0, 50) + \"...\"\n            : data.content;\n          \n          await storage.updateConversation(conversationId, {\n            title: truncatedTitle\n          });\n        }\n        \n        // Create template AI response\n        setTimeout(async () => {\n          await storage.createMessage({\n            conversationId,\n            content: `Hello, this is an AI response simulation. Are you asking about \"${data.content}\"?`,\n            role: \"assistant\",\n            attachments: null\n          });\n        }, 1000);\n      }\n      \n      res.json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  // Get token usage\n  app.get(\"/api/token-usage\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const usage = await storage.getTokenUsage(1, start, end);\n      res.json(usage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get token usage\" });\n    }\n  });\n\n  // Create token usage\n  app.post(\"/api/token-usage\", async (req, res) => {\n    try {\n      const data = insertTokenUsageSchema.parse({\n        ...req.body,\n        userId: 1\n      });\n      const usage = await storage.createTokenUsage(data);\n      res.json(usage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create token usage\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5888},"server/storage.ts":{"content":"import { \n  users, conversations, messages, tokenUsage,\n  type User, type InsertUser,\n  type Conversation, type InsertConversation,\n  type Message, type InsertMessage,\n  type TokenUsage, type InsertTokenUsage\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<User>): Promise<User | undefined>;\n\n  // Conversation methods\n  getConversations(userId: number): Promise<Conversation[]>;\n  getConversation(id: number): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Token usage methods\n  getTokenUsage(userId: number, startDate?: Date, endDate?: Date): Promise<TokenUsage[]>;\n  createTokenUsage(usage: InsertTokenUsage): Promise<TokenUsage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private conversations: Map<number, Conversation>;\n  private messages: Map<number, Message>;\n  private tokenUsage: Map<number, TokenUsage>;\n  private currentUserId: number;\n  private currentConversationId: number;\n  private currentMessageId: number;\n  private currentTokenUsageId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.tokenUsage = new Map();\n    this.currentUserId = 1;\n    this.currentConversationId = 1;\n    this.currentMessageId = 1;\n    this.currentTokenUsageId = 1;\n\n    // Add sample data\n    this.initSampleData();\n  }\n\n  private async initSampleData() {\n    // Create sample user\n    const user = await this.createUser({\n      username: \"demo_user\",\n      password: \"password\",\n      email: \"demo@example.com\",\n      role: \"Developer\",\n      profilePhoto: null,\n    });\n\n    // Create sample conversations\n    const conv1 = await this.createConversation({\n      userId: user.id,\n      title: \"Crude apa saja yang diolah pa...\",\n      isPinned: false,\n    });\n\n    // Add sample messages\n    await this.createMessage({\n      conversationId: conv1.id,\n      content: \"Crude apa saja yang diolah pada bulan Mei 2025 ?\",\n      role: \"user\",\n      attachments: null,\n    });\n\n    await this.createMessage({\n      conversationId: conv1.id,\n      content: \"Pada bulan Mei 2025, unit pengolahan di Kilang Cilacap mengolah kombinasi dari beberapa jenis minyak mentah (crude oil) untuk memenuhi spesifikasi produk dan optimasi biaya operasional.\\n\\nJenis Crude Oil yang Diolah:\\n\\nMinas Crude: Merupakan crude oil yang diproduksi secara domestik dari sumur minyak di Indonesia. Ini adalah minyak mentah yang stabil dengan kadar sulfur rendah, sering digunakan sebagai base load di kilang kami.\\n\\nSaudi Light Crude: Diimpor dari Arab Saudi, minyak mentah ini memiliki kandungan sulfur yang moderat dan gravitasi API yang lebih ringan, sangat ideal untuk menghasilkan bensin dan nafta berkualitas tinggi.\\n\\nWTI (West Texas Intermediate) Crude: Jenis minyak mentah ini berasal dari Amerika Serikat. Digunakan sebagai topping untuk meningkatkan produksi produk-produk distillate ringan seperti avtur dan kerosene.\",\n      role: \"assistant\",\n      attachments: null,\n    });\n\n    // Add sample token usage\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      await this.createTokenUsage({\n        userId: user.id,\n        tokensUsed: Math.floor(Math.random() * 5000) + 1000,\n      });\n    }\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email || null,\n      profilePhoto: insertUser.profilePhoto || null,\n      role: insertUser.role || null,\n      aiPreferences: {\n        maxTokens: 4000,\n        personality: 'default',\n        addressStyle: 'casual'\n      }\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Conversation methods\n  async getConversations(userId: number): Promise<Conversation[]> {\n    return Array.from(this.conversations.values())\n      .filter(conv => conv.userId === userId)\n      .sort((a, b) => {\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        return new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime();\n      });\n  }\n\n  async getConversation(id: number): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = this.currentConversationId++;\n    const now = new Date();\n    const conversation: Conversation = {\n      ...insertConversation,\n      id,\n      isPinned: insertConversation.isPinned || false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return undefined;\n\n    const updatedConversation = { \n      ...conversation, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.conversations.set(id, updatedConversation);\n    return updatedConversation;\n  }\n\n  async deleteConversation(id: number): Promise<boolean> {\n    // Delete associated messages\n    Array.from(this.messages.values())\n      .filter(message => message.conversationId === id)\n      .forEach(message => this.messages.delete(message.id));\n    \n    return this.conversations.delete(id);\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(message => message.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = this.currentMessageId++;\n    const message: Message = {\n      ...insertMessage,\n      id,\n      attachments: insertMessage.attachments as string[] | null,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    \n    // Update conversation timestamp\n    await this.updateConversation(insertMessage.conversationId, { updatedAt: new Date() });\n    \n    return message;\n  }\n\n  // Token usage methods\n  async getTokenUsage(userId: number, startDate?: Date, endDate?: Date): Promise<TokenUsage[]> {\n    let usage = Array.from(this.tokenUsage.values())\n      .filter(usage => usage.userId === userId);\n\n    if (startDate) {\n      usage = usage.filter(u => new Date(u.date!) >= startDate);\n    }\n    if (endDate) {\n      usage = usage.filter(u => new Date(u.date!) <= endDate);\n    }\n\n    return usage.sort((a, b) => new Date(a.date!).getTime() - new Date(b.date!).getTime());\n  }\n\n  async createTokenUsage(insertUsage: InsertTokenUsage): Promise<TokenUsage> {\n    const id = this.currentTokenUsageId++;\n    const usage: TokenUsage = {\n      ...insertUsage,\n      id,\n      date: new Date(),\n    };\n    this.tokenUsage.set(id, usage);\n    return usage;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8183},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      //template = template.replace(\n      //  `src=\"/src/main.tsx\"`,\n      //  `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      //);\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2244},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  profilePhoto: text(\"profile_photo\"),\n  role: text(\"role\"),\n  aiPreferences: jsonb(\"ai_preferences\").$type<{\n    maxTokens: number;\n    personality: 'default' | 'robot' | 'cynic' | 'expert';\n    addressStyle: string;\n  }>(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  isPinned: boolean(\"is_pinned\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: integer(\"conversation_id\").notNull(),\n  content: text(\"content\").notNull(),\n  role: text(\"role\", { enum: [\"user\", \"assistant\"] }).notNull(),\n  attachments: jsonb(\"attachments\").$type<string[] | null>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tokenUsage = pgTable(\"token_usage\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  tokensUsed: integer(\"tokens_used\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  profilePhoto: true,\n  role: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTokenUsageSchema = createInsertSchema(tokenUsage).omit({\n  id: true,\n  date: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertTokenUsage = z.infer<typeof insertTokenUsageSchema>;\nexport type TokenUsage = typeof tokenUsage.$inferSelect;\n","size_bytes":2476},"src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport { Desktop } from \"@/pages/Desktop\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      <Route path=\"/\" component={Desktop} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":885},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer components {\n  .all-\\[unset\\] {\n    all: unset;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 221.2 83.2% 53.3%;\n\n    --radius: 0.75rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 217.2 91.2% 59.8%;\n\n    --radius: 0.75rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted-foreground) / 0.3);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground) / 0.5);\n  }\n}\n","size_bytes":2226},"src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"backend/app/__init__.py":{"content":"","size_bytes":0},"backend/app/main.py":{"content":"from fastapi import FastAPI\nfrom app.api import routes_chat\n\napp = FastAPI(title=\"AI Chatbot Backend\")\n\n# Register routers\napp.include_router(routes_chat.router, prefix=\"/chat\", tags=[\"chat\"])\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"AI Chatbot Backend running 🚀\"}\n","size_bytes":279},"src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider\n      value={{\n        theme,\n        setTheme,\n        toggleTheme,\n      }}\n    >\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};","size_bytes":1276},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"src/lib/http.ts":{"content":"export const API_BASE = import.meta.env.VITE_API_BASE || \"http://localhost:3000\";\n\nexport async function http<T>(path: string, options?: RequestInit): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n    ...options,\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\n","size_bytes":362},"src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/pages/Desktop.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/Sidebar/Sidebar\";\nimport { ChatTopBar } from \"@/components/Chat/ChatTopBar\";\nimport { ChatArea } from \"@/components/Chat/ChatArea\";\nimport { PromptInput } from \"@/components/Chat/PromptInput\";\nimport { SettingsDialog } from \"@/components/Settings/SettingsDialog\";\nimport type { User, Conversation, Message } from \"@shared/schema\";\n\nexport const Desktop = (): JSX.Element => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearch, setShowSearch] = useState(false);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [activeConversationId, setActiveConversationId] = useState<number | null>(null);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [pendingMessage, setPendingMessage] = useState<string | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user data\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Fetch conversations\n  const { data: conversations = [] } = useQuery<Conversation[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  // Fetch messages for active conversation\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: [`/api/conversations/${activeConversationId}/messages`],\n    enabled: !!activeConversationId,\n  });\n\n  // Fetch token usage data\n  const { data: tokenData = [] } = useQuery({\n    queryKey: [\"/api/token-usage\"],\n    select: (data: any[]) =>\n      data.map((item) => ({\n        date: new Date(item.date).toLocaleDateString(),\n        tokens: item.tokensUsed,\n      })),\n  });\n\n  // Set active conversation to first one if none selected\n  useEffect(() => {\n    if (conversations.length > 0 && !activeConversationId) {\n      setActiveConversationId(conversations[0].id);\n    }\n  }, [conversations, activeConversationId]);\n\n  // Mutations\n  const createConversationMutation = useMutation({\n    mutationFn: async (data: { title: string }) => {\n      const response = await fetch(\"/api/conversations\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: (newConversation: Conversation) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setActiveConversationId(newConversation.id);\n      toast({ title: \"New conversation created\" });\n      \n      // Send pending message if there is one\n      if (pendingMessage) {\n        createMessageMutation.mutate({\n          conversationId: newConversation.id,\n          content: pendingMessage,\n          role: \"user\"\n        });\n        setPendingMessage(null);\n      }\n    },\n  });\n\n  const updateConversationMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: number; updates: Partial<Conversation> }) => {\n      const response = await fetch(`/api/conversations/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  const deleteConversationMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/conversations/${id}`, {\n        method: \"DELETE\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setActiveConversationId(null);\n      toast({ title: \"Conversation deleted\" });\n    },\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async ({ conversationId, content, role = \"user\" }: { conversationId: number; content: string; role?: string }) => {\n      const response = await fetch(`/api/conversations/${conversationId}/messages`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ content, role, attachments: null }),\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      // Clear input immediately\n      setCurrentInput(\"\");\n      \n      // Refetch messages to show the new message\n      queryClient.invalidateQueries({ queryKey: [`/api/conversations/${variables.conversationId}/messages`] });\n      \n      // Refetch after delay to catch AI response\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [`/api/conversations/${variables.conversationId}/messages`] });\n      }, 1500);\n      \n      // Update conversations list\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to send message\", variant: \"destructive\" });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (updates: Partial<User>) => {\n      const response = await fetch(\"/api/user\", {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({ title: \"Settings updated successfully\" });\n    },\n  });\n\n  // Event handlers\n  const handleNewConversation = () => {\n    createConversationMutation.mutate({\n      title: \"New Conversation\",\n    });\n  };\n\n  const handlePinConversation = (id: number) => {\n    const conversation = conversations.find((c) => c.id === id);\n    if (conversation) {\n      updateConversationMutation.mutate({\n        id,\n        updates: { isPinned: !conversation.isPinned },\n      });\n    }\n  };\n\n  const handleDeleteConversation = (id: number) => {\n    deleteConversationMutation.mutate(id);\n  };\n\n  const handleSendMessage = (text: string, files?: File[]) => {\n    if (!text.trim()) return;\n    \n    // If no active conversation, create one first\n    if (!activeConversationId) {\n      setPendingMessage(text);\n      createConversationMutation.mutate({\n        title: text.length > 50 ? text.substring(0, 50) + \"...\" : text,\n      });\n      return;\n    }\n    \n    createMessageMutation.mutate({\n      conversationId: activeConversationId,\n      content: text,\n      role: \"user\"\n    });\n  };\n\n  const handleSettingsOpen = (setting: 'ai' | 'theme' | 'tokens' | 'profile') => {\n    setSettingsOpen(true);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-white dark:bg-gray-900\">\n      {/* Sidebar */}\n      <Sidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        searchQuery={searchQuery}\n        showSearch={showSearch}\n        onSearchChange={setSearchQuery}\n        onSearchToggle={() => setShowSearch(!showSearch)}\n        onNewConversation={handleNewConversation}\n        onSelectConversation={setActiveConversationId}\n        onPinConversation={handlePinConversation}\n        onDeleteConversation={handleDeleteConversation}\n        onSettingsOpen={handleSettingsOpen}\n        isCreatingConversation={createConversationMutation.isPending}\n      />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <ChatTopBar user={user} />\n        \n        <ChatArea\n          messages={messages}\n          activeConversationId={activeConversationId}\n          onRegenerate={(messageId) => console.log('Regenerate:', messageId)}\n        />\n        \n        {activeConversationId && (\n          <PromptInput\n            value={currentInput}\n            onChange={setCurrentInput}\n            onSend={handleSendMessage}\n            disabled={createMessageMutation.isPending}\n            isLoading={createMessageMutation.isPending}\n          />\n        )}\n      </div>\n\n      {/* Settings Dialog */}\n      <SettingsDialog\n        open={settingsOpen}\n        onOpenChange={setSettingsOpen}\n        user={user || null}\n        onUserUpdate={(updates) => updateUserMutation.mutate(updates)}\n        tokenData={tokenData}\n      />\n    </div>\n  );\n};\n","size_bytes":8353},"src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"backend/app/api/routes_auth.py":{"content":"","size_bytes":0},"backend/app/api/routes_chat.py":{"content":"from fastapi import APIRouter\nfrom app.models.schema import MessageCreate, ChatResponse\nfrom app.services.chat_services import process_user_message\n\nrouter = APIRouter()\n\n@router.post(\"/send\", response_model=ChatResponse)\nasync def send_message(message: MessageCreate):\n    \"\"\"\n    Accepts a user message, processes with AI, returns response.\n    \"\"\"\n    return await process_user_message(message)\n","size_bytes":398},"backend/app/api/routes_user.py":{"content":"","size_bytes":0},"backend/app/core/config.py":{"content":"import os\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    ai_model_provider: str = \"openrouter\"\n    ai_model_name: str = \"qwen/qwen2.5-72b-instruct:free\"\n    openrouter_api_key: str = os.getenv(\"OPENROUTER_API_KEY\", \"\")\n    \n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n","size_bytes":322},"backend/app/models/db_models.py":{"content":"from sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, ForeignKey\nfrom sqlalchemy.sql import func\nfrom sqlalchemy.orm import relationship, declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, nullable=False)\n    password = Column(String, nullable=False)\n    email = Column(String, nullable=True)\n    role = Column(String, default=\"user\")\n\n    conversations = relationship(\"Conversation\", back_populates=\"user\")\n\n\nclass Conversation(Base):\n    __tablename__ = \"conversations\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    title = Column(String, nullable=False)\n    is_pinned = Column(Boolean, default=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())\n\n    user = relationship(\"User\", back_populates=\"conversations\")\n    messages = relationship(\"Message\", back_populates=\"conversation\")\n\n\nclass Message(Base):\n    __tablename__ = \"messages\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    conversation_id = Column(Integer, ForeignKey(\"conversations.id\"), nullable=False)\n    role = Column(String, nullable=False)  # \"user\" | \"assistant\"\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    conversation = relationship(\"Conversation\", back_populates=\"messages\")\n","size_bytes":1611},"backend/app/models/schema.py":{"content":"from pydantic import BaseModel\nfrom typing import Optional, List\nfrom datetime import datetime\n\n# ----- User Schemas -----\nclass UserCreate(BaseModel):\n    username: str\n    password: str\n    email: Optional[str] = None\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: Optional[str] = None\n    role: Optional[str] = \"user\"\n\n\n# ----- Chat / Conversation Schemas -----\nclass MessageCreate(BaseModel):\n    conversation_id: Optional[int] = None\n    role: str  # \"user\" | \"assistant\"\n    content: str\n    attachments: Optional[List[str]] = None\n\n\nclass MessageOut(BaseModel):\n    id: int\n    conversation_id: int\n    role: str\n    content: str\n    created_at: datetime\n\n\nclass ChatResponse(BaseModel):\n    conversation_id: int\n    user_message: str\n    ai_response: str\n","size_bytes":785},"backend/app/services/chat_services.py":{"content":"import requests\nimport json\nfrom app.models.schema import MessageCreate, ChatResponse\nfrom app.core.config import settings\n\nOPENROUTER_URL = \"https://openrouter.ai/api/v1/chat/completions\"\n\nasync def process_user_message(message: MessageCreate) -> ChatResponse:\n    \"\"\"\n    Call OpenRouter Qwen model to get AI response\n    Uses the Qwen 2.5 72B model via OpenRouter API\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {settings.openrouter_api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"HTTP-Referer\": \"https://replit.com\",\n        \"X-Title\": \"AI Chatbot MVP\"\n    }\n\n    payload = {\n        \"model\": settings.ai_model_name,\n        \"messages\": [\n            {\"role\": \"user\", \"content\": message.content}\n        ],\n        \"max_tokens\": 4000,\n        \"temperature\": 0.7,\n        \"top_p\": 1,\n        \"frequency_penalty\": 0,\n        \"presence_penalty\": 0\n    }\n\n    try:\n        response = requests.post(OPENROUTER_URL, headers=headers, json=payload, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"choices\" in data and len(data[\"choices\"]) > 0:\n            ai_reply = data[\"choices\"][0][\"message\"][\"content\"]\n        else:\n            ai_reply = \"I apologize, but I couldn't generate a response at this time. Please try again.\"\n\n        return ChatResponse(\n            conversation_id=message.conversation_id or 1,\n            user_message=message.content,\n            ai_response=ai_reply\n        )\n    \n    except requests.exceptions.RequestException as e:\n        print(f\"Error calling OpenRouter API: {e}\")\n        return ChatResponse(\n            conversation_id=message.conversation_id or 1,\n            user_message=message.content,\n            ai_response=\"I'm experiencing technical difficulties. Please try again later.\"\n        )\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return ChatResponse(\n            conversation_id=message.conversation_id or 1,\n            user_message=message.content,\n            ai_response=\"An unexpected error occurred. Please try again.\"\n        )\n","size_bytes":2091},"src/components/Chat/AIBubble.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Download, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message } from \"@shared/schema\";\n\ninterface AIBubbleProps {\n  message: Message;\n  onCopy?: (content: string) => void;\n  onRegenerate?: () => void;\n  onDownloadDocx?: (messageId: number) => void;\n}\n\nexport function AIBubble({ \n  message, \n  onCopy, \n  onRegenerate,\n  onDownloadDocx \n}: AIBubbleProps) {\n  const { toast } = useToast();\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([message.content], { \n      type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" \n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `message-${message.id}.docx`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    onDownloadDocx?.(message.id);\n  };\n\n  return (\n    <div className=\"flex items-start mb-6\">\n      <div className=\"flex-1 max-w-[80%]\">\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl rounded-tl-md px-4 py-3 group shadow-sm\">\n          <div className=\"text-sm leading-relaxed text-gray-900 dark:text-white whitespace-pre-wrap\">\n            {message.content}\n          </div>\n          \n          <div className=\"flex items-center space-x-1 mt-3 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={handleCopy}\n            >\n              <Copy className=\"h-3 w-3 mr-1\" />\n              Copy\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={handleDownload}\n            >\n              <Download className=\"h-3 w-3 mr-1\" />\n              Download\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={onRegenerate}\n            >\n              <RotateCcw className=\"h-3 w-3 mr-1\" />\n              Regenerate\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2712},"src/components/Chat/ChatArea.tsx":{"content":"import React from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { UserBubble } from \"./UserBubble\";\nimport { AIBubble } from \"./AIBubble\";\nimport { EmptyState } from \"../Common/EmptyState\";\nimport type { Message } from \"../../shared/schema\";\n\ninterface ChatAreaProps {\n  messages: Message[];\n  activeConversationId: number | null;\n  onRegenerate: (messageId: number) => void;\n}\n\nexport function ChatArea({\n  messages,\n  activeConversationId,\n  onRegenerate,\n}: ChatAreaProps) {\n  if (!activeConversationId) {\n    return <EmptyState />;\n  }\n\n  // Filter out empty or invalid messages\n  const validMessages = messages.filter(message => \n    message && message.content && message.content.trim().length > 0\n  );\n\n  // Show empty state if no valid messages in the conversation\n  if (validMessages.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center bg-white dark:bg-gray-900\">\n        <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          <p>Start a conversation by typing a message below</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ScrollArea className=\"flex-1 bg-white dark:bg-gray-900\">\n      <div className=\"max-w-4xl mx-auto px-6 py-6\">\n        <div className=\"space-y-6\">\n          {validMessages.map((message) => (\n            message.role === \"user\" ? (\n              <UserBubble key={message.id} message={message} />\n            ) : (\n              <AIBubble \n                key={message.id} \n                message={message}\n                onRegenerate={() => onRegenerate(message.id)}\n              />\n            )\n          ))}\n        </div>\n      </div>\n    </ScrollArea>\n  );\n}","size_bytes":1693},"src/components/Chat/ChatTopBar.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { User } from \"@shared/schema\";\nimport nlLogo from \"../../assets/nl-logo.png\";\n\ninterface ChatTopBarProps {\n  user: User | null;\n}\n\nexport function ChatTopBar({ user }: ChatTopBarProps) {\n  return (\n    <header className=\"h-16 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 flex items-center justify-between px-6\">\n      <div className=\"flex items-center space-x-3\">\n        <img src={nlLogo} alt=\"NL Logo\" className=\"h-8 w-8\" />\n      </div>\n\n      <div className=\"flex items-center space-x-3\">\n        <Avatar className=\"h-8 w-8\">\n          <AvatarImage src={user?.profilePhoto || undefined} />\n          <AvatarFallback className=\"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300\">\n            {user?.username?.slice(0, 2).toUpperCase() || \"AI\"}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"text-sm\">\n          <p className=\"font-medium text-gray-900 dark:text-white\">\n            {user?.username || \"Demo User\"}\n          </p>\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            {user?.role || \"User\"}\n          </p>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1269},"src/components/Chat/PromptInput.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Send, Paperclip } from \"lucide-react\";\nimport { FilePicker } from \"../Common/FilePicker\";\n\ninterface PromptInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSend: (text: string, files?: File[]) => void;\n  disabled?: boolean;\n  isLoading?: boolean;\n  placeholder?: string;\n}\n\nexport function PromptInput({\n  value,\n  onChange,\n  onSend,\n  disabled = false,\n  isLoading = false,\n  placeholder = \"Drop Your Question\",\n}: PromptInputProps) {\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleSend = () => {\n    if (!value.trim() || disabled || isLoading) return;\n    onSend(value);\n  };\n\n  return (\n    <div className=\"border-t border-gray-200 dark:border-gray-700 bg-[#eaeaea] dark:bg-gray-800 px-6 py-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"relative bg-white dark:bg-gray-900 rounded-2xl border border-gray-300 dark:border-gray-600 shadow-sm\">\n          <div className=\"flex items-end p-4 space-x-3\">\n            <FilePicker\n              accept={[\"image/*\", \".pdf\", \".doc\", \".docx\", \".txt\"]}\n              maxSizeMB={10}\n              onFiles={(files) => console.log(\"Files selected:\", files)}\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"flex-shrink-0 h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                disabled={disabled || isLoading}\n              >\n                <Paperclip className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n              </Button>\n            </FilePicker>\n            \n            <div className=\"flex-1 relative\">\n              <Input\n                placeholder={placeholder}\n                value={value}\n                onChange={(e) => onChange(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={disabled || isLoading}\n                className=\"border-0 bg-transparent text-base px-0 py-2 focus-visible:ring-0 placeholder:text-gray-500 dark:placeholder:text-gray-400\"\n              />\n            </div>\n            \n            <Button\n              size=\"icon\"\n              onClick={handleSend}\n              disabled={!value.trim() || disabled || isLoading}\n              className=\"flex-shrink-0 h-8 w-8 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\"\n            >\n              <Send className=\"h-4 w-4 text-white\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2700},"src/components/Chat/UserBubble.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Copy, Edit, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message } from \"@shared/schema\";\n\ninterface UserBubbleProps {\n  message: Message;\n  onCopy?: (content: string) => void;\n  onEdit?: (messageId: number, text: string) => void;\n}\n\nexport function UserBubble({ message, onCopy, onEdit }: UserBubbleProps) {\n  const { toast } = useToast();\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  return (\n    <div className=\"flex items-start justify-end space-x-3 mb-6\">\n      <div className=\"flex flex-col items-end max-w-[80%]\">\n        <div className=\"bg-[#d9d9d9] dark:bg-gray-700 rounded-2xl rounded-tr-md px-4 py-3 group\">\n          <div className=\"text-sm leading-relaxed text-gray-900 dark:text-white whitespace-pre-wrap\">\n            {message.content}\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-200 dark:hover:bg-gray-600\"\n              onClick={handleCopy}\n            >\n              <Copy className=\"h-3 w-3 mr-1\" />\n              Copy\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-200 dark:hover:bg-gray-600\"\n              onClick={() => onEdit?.(message.id, message.content)}\n            >\n              <Edit className=\"h-3 w-3 mr-1\" />\n              Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Avatar className=\"h-8 w-8 flex-shrink-0\">\n        <AvatarFallback className=\"bg-gray-100 dark:bg-gray-800\">\n          <User className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n        </AvatarFallback>\n      </Avatar>\n    </div>\n  );\n}","size_bytes":2182},"src/components/Common/EmptyState.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bot, Plus } from \"lucide-react\";\n\ninterface EmptyStateProps {\n  onNewConversation?: () => void;\n}\n\nexport function EmptyState({ onNewConversation }: EmptyStateProps) {\n  return (\n    <div className=\"flex items-center justify-center h-full bg-white dark:bg-gray-900\">\n      <div className=\"text-center max-w-md mx-auto px-6\">\n        <div className=\"mb-6\">\n          <Bot className=\"h-16 w-16 mx-auto text-gray-400 dark:text-gray-600 mb-4\" />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n          Welcome to AI Chatbot\n        </h3>\n        \n        <p className=\"text-gray-500 dark:text-gray-400 mb-6 leading-relaxed\">\n          Select a conversation from the sidebar or create a new one to start \n          chatting with AI. Ask questions, get insights, and explore possibilities.\n        </p>\n        \n        {onNewConversation && (\n          <Button onClick={onNewConversation} className=\"inline-flex items-center\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Conversation\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":1203},"src/components/Common/FilePicker.tsx":{"content":"import React, { useRef } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FilePickerProps {\n  children: React.ReactNode;\n  accept: string[];\n  maxSizeMB: number;\n  onFiles: (files: File[]) => void;\n  multiple?: boolean;\n}\n\nexport function FilePicker({ \n  children, \n  accept, \n  maxSizeMB, \n  onFiles, \n  multiple = false \n}: FilePickerProps) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    \n    // Validate file sizes\n    const validFiles = files.filter(file => {\n      const sizeMB = file.size / (1024 * 1024);\n      if (sizeMB > maxSizeMB) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than ${maxSizeMB}MB`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    if (validFiles.length > 0) {\n      onFiles(validFiles);\n    }\n\n    // Reset the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <div onClick={handleClick} className=\"cursor-pointer\">\n        {children}\n      </div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={accept.join(\",\")}\n        multiple={multiple}\n        onChange={handleFileChange}\n        className=\"hidden\"\n      />\n    </>\n  );\n}","size_bytes":1525},"src/components/Settings/AIConfiguration.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { User } from \"@shared/schema\";\n\ninterface AIConfigurationProps {\n  user: User | null;\n  onSave: (config: any) => void;\n}\n\nexport function AIConfiguration({ user, onSave }: AIConfigurationProps) {\n  const [maxTokens, setMaxTokens] = useState(\n    user?.aiPreferences?.maxTokens || 1024\n  );\n  const [personality, setPersonality] = useState<\n    \"default\" | \"robot\" | \"cynic\" | \"expert\"\n  >(user?.aiPreferences?.personality || \"default\");\n  const [addressStyle, setAddressStyle] = useState(\n    user?.aiPreferences?.addressStyle || \"casual\"\n  );\n\n  const handleSave = () => {\n    onSave({\n      maxTokens,\n      personality,\n      addressStyle,\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>AI Configuration</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"tokens\">\n            Maximum Token Limit: {maxTokens.toLocaleString()}\n          </Label>\n          <Slider\n            id=\"tokens\"\n            min={256}\n            max={8192}\n            step={64}\n            value={[maxTokens]}\n            onValueChange={(value) => setMaxTokens(value[0])}\n            className=\"w-full\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Higher values allow for longer responses but consume more resources\n          </p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"personality\">AI Personality</Label>\n          <Select \n            value={personality} \n            onValueChange={(value: \"default\" | \"robot\" | \"cynic\" | \"expert\") => \n              setPersonality(value)\n            }\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select personality\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"default\">Default - Helpful and balanced</SelectItem>\n              <SelectItem value=\"robot\">Robot - Efficient and precise</SelectItem>\n              <SelectItem value=\"cynic\">Cynic - Critical and analytical</SelectItem>\n              <SelectItem value=\"expert\">Expert - Technical and detailed</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"address\">Address Style</Label>\n          <Select value={addressStyle} onValueChange={setAddressStyle}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"How should I address you?\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"casual\">Casual</SelectItem>\n              <SelectItem value=\"formal\">Formal</SelectItem>\n              <SelectItem value=\"friendly\">Friendly</SelectItem>\n              <SelectItem value=\"professional\">Professional</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 pt-4\">\n          <Button onClick={handleSave}>Save Configuration</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3439},"src/components/Settings/ProfileForm.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { User, Mail, Briefcase, Camera } from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface ProfileFormProps {\n  user: UserType | null;\n  onSave: (profile: Partial<UserType>) => void;\n}\n\nexport function ProfileForm({ user, onSave }: ProfileFormProps) {\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [role, setRole] = useState(user?.role || \"\");\n  const [profilePhoto, setProfilePhoto] = useState(user?.profilePhoto || \"\");\n\n  const handleSave = () => {\n    onSave({\n      email: email || null,\n      role: role || null,\n      profilePhoto: profilePhoto || null,\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Profile Settings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Profile Photo Section */}\n        <div className=\"flex items-center space-x-4\">\n          <Avatar className=\"h-16 w-16\">\n            <AvatarImage src={profilePhoto || undefined} />\n            <AvatarFallback className=\"bg-primary/10\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 space-y-2\">\n            <Label htmlFor=\"photo\">Profile Photo URL</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                id=\"photo\"\n                value={profilePhoto}\n                onChange={(e) => setProfilePhoto(e.target.value)}\n                placeholder=\"https://example.com/photo.jpg\"\n                className=\"flex-1\"\n              />\n              <Button variant=\"outline\" size=\"icon\">\n                <Camera className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* User Information */}\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                value={user?.username || \"\"}\n                disabled\n                className=\"bg-muted\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Username cannot be changed\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your@email.com\"\n                  className=\"pl-9\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"role\">Role / Occupation</Label>\n            <div className=\"relative\">\n              <Briefcase className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"role\"\n                value={role}\n                onChange={(e) => setRole(e.target.value)}\n                placeholder=\"e.g., Developer, Designer, Manager\"\n                className=\"pl-9\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Account Stats */}\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <h4 className=\"font-medium mb-3\">Account Information</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Account Type:</span>\n              <p className=\"font-medium\">Free User</p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Member Since:</span>\n              <p className=\"font-medium\">\n                {new Date().toLocaleDateString()}\n              </p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Conversations:</span>\n              <p className=\"font-medium\">Active</p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Status:</span>\n              <p className=\"font-medium text-green-600\">Online</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 pt-4\">\n          <Button variant=\"outline\">Reset</Button>\n          <Button onClick={handleSave}>Save Profile</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4905},"src/components/Settings/SettingsDialog.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AIConfiguration } from \"./AIConfiguration\";\nimport { ThemeSwitcher } from \"./ThemeSwitcher\";\nimport { TokenUsageChart } from \"./TokenUsageChart\";\nimport { ProfileForm } from \"./ProfileForm\";\nimport type { User } from \"@shared/schema\";\n\ninterface SettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onUserUpdate: (updates: Partial<User>) => void;\n  tokenData: Array<{ date: string; tokens: number }>;\n}\n\nexport function SettingsDialog({\n  open,\n  onOpenChange,\n  user,\n  onUserUpdate,\n  tokenData,\n}: SettingsDialogProps) {\n  const [activeTab, setActiveTab] = useState(\"ai-config\");\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex space-x-2 border-b\">\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"ai-config\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"ai-config\")}\n            >\n              AI Config\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"theme\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"theme\")}\n            >\n              Theme\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"token-usage\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"token-usage\")}\n            >\n              Token Usage\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"profile\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"profile\")}\n            >\n              Profile\n            </button>\n          </div>\n          \n          <div className=\"mt-6\">\n            {activeTab === \"ai-config\" && (\n              <AIConfiguration \n                user={user}\n                onSave={(config) => onUserUpdate({ aiPreferences: config })}\n              />\n            )}\n            \n            {activeTab === \"theme\" && <ThemeSwitcher />}\n            \n            {activeTab === \"token-usage\" && <TokenUsageChart data={tokenData} />}\n            \n            {activeTab === \"profile\" && (\n              <ProfileForm \n                user={user}\n                onSave={(profile) => onUserUpdate(profile)}\n              />\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3507},"src/components/Settings/ThemeSwitcher.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Sun, Moon, Monitor } from \"lucide-react\";\n\nexport function ThemeSwitcher() {\n  const { theme, setTheme, toggleTheme } = useTheme();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Theme Settings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button\n            variant={theme === \"light\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"light\")}\n            className=\"flex items-center justify-center space-x-2 h-16\"\n          >\n            <Sun className=\"h-5 w-5\" />\n            <span>Light Mode</span>\n          </Button>\n          \n          <Button\n            variant={theme === \"dark\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"dark\")}\n            className=\"flex items-center justify-center space-x-2 h-16\"\n          >\n            <Moon className=\"h-5 w-5\" />\n            <span>Dark Mode</span>\n          </Button>\n        </div>\n\n        <div className=\"border-t pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Quick Toggle</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Switch between light and dark themes instantly\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"flex items-center space-x-2\"\n            >\n              <Monitor className=\"h-4 w-4\" />\n              <span>Toggle</span>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Current theme:</strong> {theme === \"light\" ? \"Light\" : \"Dark\"} mode\n            <br />\n            Theme settings are automatically saved and will persist across sessions.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2319},"src/components/Settings/TokenUsageChart.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\ninterface TokenUsageChartProps {\n  data: Array<{ date: string; tokens: number }>;\n  from?: string;\n  to?: string;\n  onRangeChange?: (from: string, to: string) => void;\n}\n\nexport function TokenUsageChart({ data }: TokenUsageChartProps) {\n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n\n  const filteredData = data.filter((item) => {\n    const itemDate = new Date(item.date);\n    if (startDate && itemDate < startDate) return false;\n    if (endDate && itemDate > endDate) return false;\n    return true;\n  });\n\n  const totalTokens = filteredData.reduce((sum, item) => sum + item.tokens, 0);\n  const averageTokens = filteredData.length \n    ? Math.round(totalTokens / filteredData.length)\n    : 0;\n  const maxTokens = Math.max(...filteredData.map(item => item.tokens), 0);\n\n  const pieData = [\n    { name: 'Used', value: totalTokens, fill: 'hsl(var(--primary))' },\n    { name: 'Remaining', value: Math.max(10000 - totalTokens, 0), fill: 'hsl(var(--muted))' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Token Usage Analytics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            <div>\n              <Label>From Date</Label>\n              <DatePicker date={startDate} setDate={setStartDate} />\n            </div>\n            <div>\n              <Label>To Date</Label>\n              <DatePicker date={endDate} setDate={setEndDate} />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {totalTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total Tokens</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {averageTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Average</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {maxTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Maximum</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"h-[300px] mb-6\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={filteredData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey=\"date\" \n                  className=\"text-xs\"\n                  tick={{ fontSize: 12 }}\n                />\n                <YAxis \n                  className=\"text-xs\"\n                  tick={{ fontSize: 12 }}\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'hsl(var(--card))',\n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '6px'\n                  }}\n                />\n                <Bar \n                  dataKey=\"tokens\" \n                  fill=\"hsl(var(--primary))\" \n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Usage Distribution</h4>\n              <div className=\"h-[200px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      dataKey=\"value\"\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Usage Insights</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Peak usage day:</span>\n                  <span className=\"font-medium\">\n                    {filteredData.length > 0 \n                      ? filteredData.reduce((max, item) => \n                          item.tokens > max.tokens ? item : max, filteredData[0]\n                        ).date\n                      : 'N/A'\n                    }\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Usage trend:</span>\n                  <span className=\"font-medium text-green-600\">\n                    {totalTokens > 0 ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Days tracked:</span>\n                  <span className=\"font-medium\">{filteredData.length}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6207},"src/components/Sidebar/ConversationActionsMenu.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Pin, Trash2 } from \"lucide-react\";\nimport type { Conversation } from \"@shared/schema\";\n\ninterface ConversationActionsMenuProps {\n  conversation: Conversation;\n  onPin: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nexport function ConversationActionsMenu({\n  conversation,\n  onPin,\n  onDelete,\n}: ConversationActionsMenuProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-gray-300 dark:hover:bg-gray-600\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <MoreVertical className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        <DropdownMenuItem onClick={() => onPin(conversation.id)}>\n          <Pin className=\"mr-2 h-4 w-4\" />\n          {conversation.isPinned ? \"Unpin\" : \"Pin\"} conversation\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => onDelete(conversation.id)}\n          className=\"text-destructive focus:text-destructive\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1567},"src/components/Sidebar/ConversationList.tsx":{"content":"import React from \"react\";\nimport { ConversationActionsMenu } from \"./ConversationActionsMenu\";\nimport { cn } from \"@/lib/utils\";\nimport type { Conversation } from \"@shared/schema\";\n\ninterface ConversationListProps {\n  conversations: Conversation[];\n  activeConversationId: number | null;\n  onSelect: (id: number) => void;\n  onPin: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nexport function ConversationList({\n  conversations,\n  activeConversationId,\n  onSelect,\n  onPin,\n  onDelete,\n}: ConversationListProps) {\n  return (\n    <div className=\"space-y-1\">\n      {conversations.map((conversation) => (\n        <div\n          key={conversation.id}\n          className={cn(\n            \"group relative flex items-center rounded-lg px-3 py-2 cursor-pointer transition-colors\",\n            conversation.id === activeConversationId\n              ? \"bg-[#b4b4b4] dark:bg-gray-700\"\n              : \"bg-[#b4b4b48c] dark:bg-gray-800/50 hover:bg-[#b4b4b4] dark:hover:bg-gray-700\"\n          )}\n          onClick={() => onSelect(conversation.id)}\n        >\n          <div className=\"flex-1 min-w-0 mr-8\">\n            <p \n              className={cn(\n                \"truncate text-base font-normal\",\n                conversation.id === activeConversationId\n                  ? \"text-black dark:text-white\"\n                  : \"text-[#0000008c] dark:text-gray-300\"\n              )}\n              title={conversation.title}\n            >\n              {conversation.title.length > 25 ? `${conversation.title.substring(0, 25)}...` : conversation.title}\n            </p>\n          </div>\n          \n          <div className=\"absolute right-3 flex-shrink-0\">\n            <ConversationActionsMenu\n              conversation={conversation}\n              onPin={onPin}\n              onDelete={onDelete}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":1871},"src/components/Sidebar/Sidebar.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Menu,\n  Search,\n  Plus,\n  Settings,\n  ChevronDown,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ConversationList } from \"./ConversationList\";\nimport type { Conversation } from \"@shared/schema\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface SidebarProps {\n  isCollapsed: boolean;\n  onToggle: () => void;\n  conversations: Conversation[];\n  activeConversationId: number | null;\n  searchQuery: string;\n  showSearch: boolean;\n  onSearchChange: (query: string) => void;\n  onSearchToggle: () => void;\n  onNewConversation: () => void;\n  onSelectConversation: (id: number) => void;\n  onPinConversation: (id: number) => void;\n  onDeleteConversation: (id: number) => void;\n  onSettingsOpen: (setting: 'ai' | 'theme' | 'tokens' | 'profile') => void;\n  isCreatingConversation: boolean;\n}\n\nexport function Sidebar({\n  isCollapsed,\n  onToggle,\n  conversations,\n  activeConversationId,\n  searchQuery,\n  showSearch,\n  onSearchChange,\n  onSearchToggle,\n  onNewConversation,\n  onSelectConversation,\n  onPinConversation,\n  onDeleteConversation,\n  onSettingsOpen,\n  isCreatingConversation,\n}: SidebarProps) {\n  const pinnedConversations = conversations.filter((c) => c.isPinned);\n  const recentConversations = conversations.filter((c) => !c.isPinned);\n\n  const filteredPinned = pinnedConversations.filter((conv) =>\n    conv.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  \n  const filteredRecent = recentConversations.filter((conv) =>\n    conv.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <aside\n      className={cn(\n        \"flex flex-col bg-[#e6e6e6] dark:bg-gray-900 border-r border-gray-300 dark:border-gray-700 transition-all duration-300\",\n        isCollapsed ? \"w-16\" : \"w-80\"\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-300 dark:border-gray-700\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onToggle}\n          className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n        >\n          <Menu className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n        </Button>\n        \n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onSearchToggle}\n              className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n            >\n              <Search className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onNewConversation}\n              disabled={isCreatingConversation}\n              className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n            >\n              <Plus className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Search */}\n      {!isCollapsed && showSearch && (\n        <div className=\"p-4 border-b border-gray-300 dark:border-gray-700\">\n          <Input\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm\"\n          />\n        </div>\n      )}\n\n      {/* New Conversation Button */}\n      {!isCollapsed && !showSearch && (\n        <div className=\"p-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={onNewConversation}\n            disabled={isCreatingConversation}\n            className=\"w-full justify-start text-left h-auto py-2 px-3 hover:bg-gray-200 dark:hover:bg-gray-800\"\n          >\n            <Plus className=\"h-6 w-6 mr-3 text-gray-700 dark:text-gray-300\" />\n            <span className=\"text-lg font-normal text-gray-700 dark:text-gray-300\">\n              New Conversation\n            </span>\n          </Button>\n        </div>\n      )}\n\n      {/* Conversations */}\n      {!isCollapsed && (\n        <div className=\"flex-1 px-4\">\n          <h2 className=\"text-base font-medium text-gray-600 dark:text-gray-400 mb-3\">\n            Conversations\n          </h2>\n          \n          <ScrollArea className=\"flex-1 -mx-1\">\n            <div className=\"space-y-3\">\n              {/* Pinned Section */}\n              {filteredPinned.length > 0 && (\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <ChevronDown className=\"h-4 w-4 text-gray-500 mr-1\" />\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Pinned\n                    </span>\n                  </div>\n                  <ConversationList\n                    conversations={filteredPinned}\n                    activeConversationId={activeConversationId}\n                    onSelect={onSelectConversation}\n                    onPin={onPinConversation}\n                    onDelete={onDeleteConversation}\n                  />\n                </div>\n              )}\n\n              {/* Recent Section */}\n              {filteredRecent.length > 0 && (\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <ChevronDown className=\"h-4 w-4 text-gray-500 mr-1\" />\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Recent\n                    </span>\n                  </div>\n                  <ConversationList\n                    conversations={filteredRecent}\n                    activeConversationId={activeConversationId}\n                    onSelect={onSelectConversation}\n                    onPin={onPinConversation}\n                    onDelete={onDeleteConversation}\n                  />\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      )}\n\n      {/* Settings */}\n      <div className=\"p-4 border-t border-gray-300 dark:border-gray-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              size={isCollapsed ? \"icon\" : \"default\"} \n              className={cn(\n                \"hover:bg-gray-200 dark:hover:bg-gray-800\",\n                isCollapsed ? \"h-8 w-8 p-0\" : \"w-full justify-start\"\n              )}\n            >\n              <Settings className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n              {!isCollapsed && <span className=\"ml-2 text-lg font-normal\">Settings</span>}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuItem onClick={() => onSettingsOpen('ai')}>\n              AI Configuration\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('theme')}>\n              Theme\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('tokens')}>\n              Token Usage\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('profile')}>\n              Profile\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </aside>\n  );\n}","size_bytes":7577},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"\"use client\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1435},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"src/components/ui/button.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1918},"src/components/ui/calendar.tsx":{"content":"import { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };","size_bytes":2584},"src/components/ui/card.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1860},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"src/components/ui/conversation-item.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Pin, Edit, Trash2 } from \"lucide-react\";\nimport { type Conversation } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isActive?: boolean;\n  onClick?: () => void;\n  onPin?: (id: number) => void;\n  onRename?: (id: number) => void;\n  onDelete?: (id: number) => void;\n}\n\nexport function ConversationItem({\n  conversation,\n  isActive,\n  onClick,\n  onPin,\n  onRename,\n  onDelete,\n}: ConversationItemProps) {\n  return (\n    <div\n      className={cn(\n        \"group relative flex items-center space-x-3 rounded-lg px-3 py-2 text-sm hover:bg-muted/50 cursor-pointer transition-colors\",\n        isActive && \"bg-muted\"\n      )}\n      onClick={onClick}\n    >\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"truncate text-foreground\">{conversation.title}</p>\n          {conversation.isPinned && (\n            <Badge variant=\"secondary\" className=\"h-4 px-1\">\n              <Pin className=\"h-3 w-3\" />\n            </Badge>\n          )}\n        </div>\n      </div>\n      \n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <MoreVertical className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-48\">\n          <DropdownMenuItem onClick={() => onPin?.(conversation.id)}>\n            <Pin className=\"mr-2 h-4 w-4\" />\n            {conversation.isPinned ? \"Unpin\" : \"Pin\"} conversation\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => onRename?.(conversation.id)}>\n            <Edit className=\"mr-2 h-4 w-4\" />\n            Rename\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => onDelete?.(conversation.id)}\n            className=\"text-destructive\"\n          >\n            <Trash2 className=\"mr-2 h-4 w-4\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}","size_bytes":2472},"src/components/ui/date-picker.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DatePickerProps {\n  date?: Date;\n  setDate: (date: Date | undefined) => void;\n  placeholder?: string;\n}\n\nexport function DatePicker({ date, setDate, placeholder = \"Pick a date\" }: DatePickerProps) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":1192},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/components/ui/input.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":779},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"src/components/ui/message-item.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Copy, Edit, Download, RotateCcw, User, Bot } from \"lucide-react\";\nimport { type Message } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MessageItemProps {\n  message: Message;\n  onEdit?: (id: number) => void;\n  onCopy?: (content: string) => void;\n  onDownload?: (content: string) => void;\n  onRepeat?: (id: number) => void;\n}\n\nexport function MessageItem({\n  message,\n  onEdit,\n  onCopy,\n  onDownload,\n  onRepeat,\n}: MessageItemProps) {\n  const { toast } = useToast();\n  const isUser = message.role === \"user\";\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([message.content], { type: \"application/msword\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `message-${message.id}.docx`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    onDownload?.(message.content);\n  };\n\n  return (\n    <div className={cn(\"flex items-start space-x-3 mb-6\", isUser && \"flex-row-reverse space-x-reverse\")}>\n      <Avatar className=\"h-8 w-8 flex-shrink-0\">\n        <AvatarImage src={isUser ? undefined : \"/bot-avatar.png\"} />\n        <AvatarFallback>\n          {isUser ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n        </AvatarFallback>\n      </Avatar>\n\n      <div className={cn(\"flex-1 max-w-[80%]\", isUser && \"flex justify-end\")}>\n        <Card \n          className={cn(\n            \"group transition-all hover:shadow-md\",\n            isUser \n              ? \"bg-muted/50 dark:bg-muted/30\" \n              : \"bg-background border-border\"\n          )}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n              {message.content}\n            </div>\n            \n            <div className={cn(\n              \"flex items-center space-x-1 mt-3 opacity-0 group-hover:opacity-100 transition-opacity\",\n              isUser ? \"justify-start\" : \"justify-start\"\n            )}>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={handleCopy}\n              >\n                <Copy className=\"h-3 w-3 mr-1\" />\n                Copy\n              </Button>\n              \n              {isUser && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 px-2 text-xs\"\n                  onClick={() => onEdit?.(message.id)}\n                >\n                  <Edit className=\"h-3 w-3 mr-1\" />\n                  Edit\n                </Button>\n              )}\n              \n              {!isUser && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={handleDownload}\n                  >\n                    <Download className=\"h-3 w-3 mr-1\" />\n                    Download\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={() => onRepeat?.(message.id)}\n                  >\n                    <RotateCcw className=\"h-3 w-3 mr-1\" />\n                    Regenerate\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3934},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/popover.tsx":{"content":"import * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverAnchor = PopoverPrimitive.Anchor;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n","size_bytes":1305},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"src/components/ui/scroll-area.tsx":{"content":"import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","size_bytes":1654},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/components/ui/settings-dialogs.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { type User } from \"@shared/schema\";\nimport { DatePicker } from \"./date-picker\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\ninterface AIConfigDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onSave: (config: any) => void;\n}\n\nexport function AIConfigDialog({ open, onOpenChange, user, onSave }: AIConfigDialogProps) {\n  const [maxTokens, setMaxTokens] = useState(user?.aiPreferences?.maxTokens || 4000);\n  const [personality, setPersonality] = useState<\"default\" | \"robot\" | \"cynic\" | \"expert\">(user?.aiPreferences?.personality || \"default\");\n  const [addressStyle, setAddressStyle] = useState(user?.aiPreferences?.addressStyle || \"casual\");\n\n  const handleSave = () => {\n    onSave({\n      maxTokens,\n      personality,\n      addressStyle,\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>AI Configuration</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-6 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"tokens\">Maximum Token Limit: {maxTokens}</Label>\n            <Slider\n              id=\"tokens\"\n              min={1000}\n              max={8000}\n              step={100}\n              value={[maxTokens]}\n              onValueChange={(value) => setMaxTokens(value[0])}\n              className=\"w-full\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"personality\">AI Personality</Label>\n            <Select value={personality} onValueChange={(value: \"default\" | \"robot\" | \"cynic\" | \"expert\") => setPersonality(value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select personality\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"default\">Default</SelectItem>\n                <SelectItem value=\"robot\">Robot (Efficient & Rigid)</SelectItem>\n                <SelectItem value=\"cynic\">Cynic</SelectItem>\n                <SelectItem value=\"expert\">Expert</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"address\">How should I address you?</Label>\n            <Input\n              id=\"address\"\n              value={addressStyle}\n              onChange={(e) => setAddressStyle(e.target.value)}\n              placeholder=\"e.g., casual, formal, by name\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>Save Changes</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface ThemeDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ThemeDialog({ open, onOpenChange }: ThemeDialogProps) {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[400px]\">\n        <DialogHeader>\n          <DialogTitle>Theme Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Light Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Use light colors and backgrounds\n              </p>\n            </div>\n            <Switch\n              checked={theme === \"light\"}\n              onCheckedChange={(checked) => setTheme(checked ? \"light\" : \"dark\")}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Dark Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Use dark colors and backgrounds\n              </p>\n            </div>\n            <Switch\n              checked={theme === \"dark\"}\n              onCheckedChange={(checked) => setTheme(checked ? \"dark\" : \"light\")}\n            />\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface TokenUsageDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  tokenData: Array<{ date: string; tokens: number }>;\n}\n\nexport function TokenUsageDialog({ open, onOpenChange, tokenData }: TokenUsageDialogProps) {\n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n\n  const filteredData = tokenData.filter(item => {\n    const itemDate = new Date(item.date);\n    if (startDate && itemDate < startDate) return false;\n    if (endDate && itemDate > endDate) return false;\n    return true;\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Token Usage</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label>Start Date</Label>\n              <DatePicker date={startDate} setDate={setStartDate} />\n            </div>\n            <div className=\"flex-1\">\n              <Label>End Date</Label>\n              <DatePicker date={endDate} setDate={setEndDate} />\n            </div>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Daily Token Usage</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={filteredData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"tokens\" fill=\"hsl(var(--primary))\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">\n                  {filteredData.reduce((sum, item) => sum + item.tokens, 0).toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total Tokens</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">\n                  {filteredData.length ? Math.round(filteredData.reduce((sum, item) => sum + item.tokens, 0) / filteredData.length).toLocaleString() : 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Average</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface ProfileDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onSave: (profile: Partial<User>) => void;\n}\n\nexport function ProfileDialog({ open, onOpenChange, user, onSave }: ProfileDialogProps) {\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [role, setRole] = useState(user?.role || \"\");\n  const [profilePhoto, setProfilePhoto] = useState(user?.profilePhoto || \"\");\n\n  const handleSave = () => {\n    onSave({\n      email: email || null,\n      role: role || null,\n      profilePhoto: profilePhoto || null,\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Profile Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"your@email.com\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"role\">Role/Job</Label>\n            <Input\n              id=\"role\"\n              value={role}\n              onChange={(e) => setRole(e.target.value)}\n              placeholder=\"e.g., Developer, Designer, Manager\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"photo\">Profile Photo URL</Label>\n            <Input\n              id=\"photo\"\n              value={profilePhoto}\n              onChange={(e) => setProfilePhoto(e.target.value)}\n              placeholder=\"https://example.com/photo.jpg\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>Save Changes</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10076},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages - COMPLETED: Successfully installed all Node.js dependencies and restructured project\n[x] 2. Restart the workflow to see if the project is working - COMPLETED: Application running successfully\n[x] 15. Fixed conversation sidebar layout issue - COMPLETED: Long conversation titles now truncate properly with ellipses, three-dots menu always visible\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed conversation section issues (removed empty bubbles, implemented template AI response system)\n[x] 5. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 5. Implement improved UI design with modern, minimalist appearance\n[x] 6. Add sidebar functionality (hamburger menu, search, new conversation)\n[x] 7. Create interactive settings popup with AI config, theme, token usage, profile\n[x] 8. Implement chat widget improvements with proper message formatting\n[x] 9. Add message actions (copy, edit, download, repeat)\n[x] 10. Create responsive design that fits desktop screen properly\n[x] 11. Create modular component architecture following PDF guidelines\n[x] 12. Separate frontend components into organized directory structure\n[x] 13. Create comprehensive backend configuration guidelines\n[x] 14. Test all functionality and ensure everything works correctly","size_bytes":1394},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"frontend/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"frontend/pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.1\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pydantic>=2.11.7\",\n    \"sqlalchemy>=2.0.43\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":272},"frontend/tailwind.config.ts":{"content":"module.exports = {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{html,js,ts,jsx,tsx}\",\n    \"app/**/*.{ts,tsx}\",\n    \"components/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\n          \"ui-sans-serif\",\n          \"system-ui\",\n          \"sans-serif\",\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n          '\"Noto Color Emoji\"',\n        ],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n    container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\" } },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n  darkMode: [\"class\"],\n};\n","size_bytes":2379},"frontend/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"src\"),        // ⬅️ update\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"public\") // ⬅️ update (assets taruh di public)\n    },\n  },\n  root: path.resolve(import.meta.dirname), // ⬅️ ubah ke root frontend langsung\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1048},"frontend/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"frontend/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertConversationSchema,\n  insertMessageSchema,\n  insertTokenUsageSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get current user (for demo purposes, we'll use user ID 1)\n  app.get(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUser(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Update user\n  app.patch(\"/api/user\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(1, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Get conversations\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getConversations(1);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get conversations\" });\n    }\n  });\n\n  // Create conversation\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const data = insertConversationSchema.parse({\n        ...req.body,\n        userId: 1\n      });\n      const conversation = await storage.createConversation(data);\n      res.json(conversation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  // Update conversation\n  app.patch(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const conversation = await storage.updateConversation(id, updates);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      res.json(conversation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update conversation\" });\n    }\n  });\n\n  // Delete conversation\n  app.delete(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteConversation(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      res.json({ message: \"Conversation deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Get messages for a conversation\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  // Create message\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const data = insertMessageSchema.parse({\n        ...req.body,\n        conversationId\n      });\n      const message = await storage.createMessage(data);\n      \n      // If this is the first user message, update conversation title\n      if (data.role === \"user\") {\n        const existingMessages = await storage.getMessages(conversationId);\n        const userMessages = existingMessages.filter(msg => msg.role === \"user\");\n        \n        // If this is the first user message, update the conversation title\n        if (userMessages.length === 1) {\n          const truncatedTitle = data.content.length > 50 \n            ? data.content.substring(0, 50) + \"...\"\n            : data.content;\n          \n          await storage.updateConversation(conversationId, {\n            title: truncatedTitle\n          });\n        }\n        \n        // Create template AI response\n        setTimeout(async () => {\n          await storage.createMessage({\n            conversationId,\n            content: `Hello, this is an AI response simulation. Are you asking about \"${data.content}\"?`,\n            role: \"assistant\",\n            attachments: null\n          });\n        }, 1000);\n      }\n      \n      res.json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  // Get token usage\n  app.get(\"/api/token-usage\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const usage = await storage.getTokenUsage(1, start, end);\n      res.json(usage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get token usage\" });\n    }\n  });\n\n  // Create token usage\n  app.post(\"/api/token-usage\", async (req, res) => {\n    try {\n      const data = insertTokenUsageSchema.parse({\n        ...req.body,\n        userId: 1\n      });\n      const usage = await storage.createTokenUsage(data);\n      res.json(usage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create token usage\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5888},"frontend/server/storage.ts":{"content":"import { \n  users, conversations, messages, tokenUsage,\n  type User, type InsertUser,\n  type Conversation, type InsertConversation,\n  type Message, type InsertMessage,\n  type TokenUsage, type InsertTokenUsage\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<User>): Promise<User | undefined>;\n\n  // Conversation methods\n  getConversations(userId: number): Promise<Conversation[]>;\n  getConversation(id: number): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Token usage methods\n  getTokenUsage(userId: number, startDate?: Date, endDate?: Date): Promise<TokenUsage[]>;\n  createTokenUsage(usage: InsertTokenUsage): Promise<TokenUsage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private conversations: Map<number, Conversation>;\n  private messages: Map<number, Message>;\n  private tokenUsage: Map<number, TokenUsage>;\n  private currentUserId: number;\n  private currentConversationId: number;\n  private currentMessageId: number;\n  private currentTokenUsageId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.tokenUsage = new Map();\n    this.currentUserId = 1;\n    this.currentConversationId = 1;\n    this.currentMessageId = 1;\n    this.currentTokenUsageId = 1;\n\n    // Add sample data\n    this.initSampleData();\n  }\n\n  private async initSampleData() {\n    // Create sample user\n    const user = await this.createUser({\n      username: \"demo_user\",\n      password: \"password\",\n      email: \"demo@example.com\",\n      role: \"Developer\",\n      profilePhoto: null,\n    });\n\n    // Create sample conversations\n    const conv1 = await this.createConversation({\n      userId: user.id,\n      title: \"Crude apa saja yang diolah pa...\",\n      isPinned: false,\n    });\n\n    // Add sample messages\n    await this.createMessage({\n      conversationId: conv1.id,\n      content: \"Crude apa saja yang diolah pada bulan Mei 2025 ?\",\n      role: \"user\",\n      attachments: null,\n    });\n\n    await this.createMessage({\n      conversationId: conv1.id,\n      content: \"Pada bulan Mei 2025, unit pengolahan di Kilang Cilacap mengolah kombinasi dari beberapa jenis minyak mentah (crude oil) untuk memenuhi spesifikasi produk dan optimasi biaya operasional.\\n\\nJenis Crude Oil yang Diolah:\\n\\nMinas Crude: Merupakan crude oil yang diproduksi secara domestik dari sumur minyak di Indonesia. Ini adalah minyak mentah yang stabil dengan kadar sulfur rendah, sering digunakan sebagai base load di kilang kami.\\n\\nSaudi Light Crude: Diimpor dari Arab Saudi, minyak mentah ini memiliki kandungan sulfur yang moderat dan gravitasi API yang lebih ringan, sangat ideal untuk menghasilkan bensin dan nafta berkualitas tinggi.\\n\\nWTI (West Texas Intermediate) Crude: Jenis minyak mentah ini berasal dari Amerika Serikat. Digunakan sebagai topping untuk meningkatkan produksi produk-produk distillate ringan seperti avtur dan kerosene.\",\n      role: \"assistant\",\n      attachments: null,\n    });\n\n    // Add sample token usage\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      await this.createTokenUsage({\n        userId: user.id,\n        tokensUsed: Math.floor(Math.random() * 5000) + 1000,\n      });\n    }\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email || null,\n      profilePhoto: insertUser.profilePhoto || null,\n      role: insertUser.role || null,\n      aiPreferences: {\n        maxTokens: 4000,\n        personality: 'default',\n        addressStyle: 'casual'\n      }\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Conversation methods\n  async getConversations(userId: number): Promise<Conversation[]> {\n    return Array.from(this.conversations.values())\n      .filter(conv => conv.userId === userId)\n      .sort((a, b) => {\n        if (a.isPinned && !b.isPinned) return -1;\n        if (!a.isPinned && b.isPinned) return 1;\n        return new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime();\n      });\n  }\n\n  async getConversation(id: number): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = this.currentConversationId++;\n    const now = new Date();\n    const conversation: Conversation = {\n      ...insertConversation,\n      id,\n      isPinned: insertConversation.isPinned || false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return undefined;\n\n    const updatedConversation = { \n      ...conversation, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.conversations.set(id, updatedConversation);\n    return updatedConversation;\n  }\n\n  async deleteConversation(id: number): Promise<boolean> {\n    // Delete associated messages\n    Array.from(this.messages.values())\n      .filter(message => message.conversationId === id)\n      .forEach(message => this.messages.delete(message.id));\n    \n    return this.conversations.delete(id);\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(message => message.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = this.currentMessageId++;\n    const message: Message = {\n      ...insertMessage,\n      id,\n      attachments: insertMessage.attachments as string[] | null,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    \n    // Update conversation timestamp\n    await this.updateConversation(insertMessage.conversationId, { updatedAt: new Date() });\n    \n    return message;\n  }\n\n  // Token usage methods\n  async getTokenUsage(userId: number, startDate?: Date, endDate?: Date): Promise<TokenUsage[]> {\n    let usage = Array.from(this.tokenUsage.values())\n      .filter(usage => usage.userId === userId);\n\n    if (startDate) {\n      usage = usage.filter(u => new Date(u.date!) >= startDate);\n    }\n    if (endDate) {\n      usage = usage.filter(u => new Date(u.date!) <= endDate);\n    }\n\n    return usage.sort((a, b) => new Date(a.date!).getTime() - new Date(b.date!).getTime());\n  }\n\n  async createTokenUsage(insertUsage: InsertTokenUsage): Promise<TokenUsage> {\n    const id = this.currentTokenUsageId++;\n    const usage: TokenUsage = {\n      ...insertUsage,\n      id,\n      date: new Date(),\n    };\n    this.tokenUsage.set(id, usage);\n    return usage;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8183},"frontend/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      //template = template.replace(\n      //  `src=\"/src/main.tsx\"`,\n      //  `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      //);\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2244},"frontend/shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  profilePhoto: text(\"profile_photo\"),\n  role: text(\"role\"),\n  aiPreferences: jsonb(\"ai_preferences\").$type<{\n    maxTokens: number;\n    personality: 'default' | 'robot' | 'cynic' | 'expert';\n    addressStyle: string;\n  }>(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  isPinned: boolean(\"is_pinned\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: integer(\"conversation_id\").notNull(),\n  content: text(\"content\").notNull(),\n  role: text(\"role\", { enum: [\"user\", \"assistant\"] }).notNull(),\n  attachments: jsonb(\"attachments\").$type<string[] | null>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tokenUsage = pgTable(\"token_usage\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  tokensUsed: integer(\"tokens_used\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  profilePhoto: true,\n  role: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTokenUsageSchema = createInsertSchema(tokenUsage).omit({\n  id: true,\n  date: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertTokenUsage = z.infer<typeof insertTokenUsageSchema>;\nexport type TokenUsage = typeof tokenUsage.$inferSelect;\n","size_bytes":2476},"frontend/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport { Desktop } from \"@/pages/Desktop\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      <Route path=\"/\" component={Desktop} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":885},"frontend/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer components {\n  .all-\\[unset\\] {\n    all: unset;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 221.2 83.2% 53.3%;\n\n    --radius: 0.75rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 217.2 91.2% 59.8%;\n\n    --radius: 0.75rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted-foreground) / 0.3);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground) / 0.5);\n  }\n}\n","size_bytes":2226},"frontend/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"frontend/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider\n      value={{\n        theme,\n        setTheme,\n        toggleTheme,\n      }}\n    >\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};","size_bytes":1276},"frontend/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"frontend/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"frontend/src/lib/http.ts":{"content":"export const API_BASE = import.meta.env.VITE_API_BASE || \"http://localhost:3000\";\n\nexport async function http<T>(path: string, options?: RequestInit): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n    ...options,\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\n","size_bytes":362},"frontend/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"frontend/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"frontend/src/pages/Desktop.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/Sidebar/Sidebar\";\nimport { ChatTopBar } from \"@/components/Chat/ChatTopBar\";\nimport { ChatArea } from \"@/components/Chat/ChatArea\";\nimport { PromptInput } from \"@/components/Chat/PromptInput\";\nimport { SettingsDialog } from \"@/components/Settings/SettingsDialog\";\nimport type { User, Conversation, Message } from \"@shared/schema\";\n\nexport const Desktop = (): JSX.Element => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearch, setShowSearch] = useState(false);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [activeConversationId, setActiveConversationId] = useState<number | null>(null);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [pendingMessage, setPendingMessage] = useState<string | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user data\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Fetch conversations\n  const { data: conversations = [] } = useQuery<Conversation[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  // Fetch messages for active conversation\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: [`/api/conversations/${activeConversationId}/messages`],\n    enabled: !!activeConversationId,\n  });\n\n  // Fetch token usage data\n  const { data: tokenData = [] } = useQuery({\n    queryKey: [\"/api/token-usage\"],\n    select: (data: any[]) =>\n      data.map((item) => ({\n        date: new Date(item.date).toLocaleDateString(),\n        tokens: item.tokensUsed,\n      })),\n  });\n\n  // Set active conversation to first one if none selected\n  useEffect(() => {\n    if (conversations.length > 0 && !activeConversationId) {\n      setActiveConversationId(conversations[0].id);\n    }\n  }, [conversations, activeConversationId]);\n\n  // Mutations\n  const createConversationMutation = useMutation({\n    mutationFn: async (data: { title: string }) => {\n      const response = await fetch(\"/api/conversations\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: (newConversation: Conversation) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setActiveConversationId(newConversation.id);\n      toast({ title: \"New conversation created\" });\n      \n      // Send pending message if there is one\n      if (pendingMessage) {\n        createMessageMutation.mutate({\n          conversationId: newConversation.id,\n          content: pendingMessage,\n          role: \"user\"\n        });\n        setPendingMessage(null);\n      }\n    },\n  });\n\n  const updateConversationMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: number; updates: Partial<Conversation> }) => {\n      const response = await fetch(`/api/conversations/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  const deleteConversationMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/conversations/${id}`, {\n        method: \"DELETE\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setActiveConversationId(null);\n      toast({ title: \"Conversation deleted\" });\n    },\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async ({ conversationId, content, role = \"user\" }: { conversationId: number; content: string; role?: string }) => {\n      const response = await fetch(`/api/conversations/${conversationId}/messages`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ content, role, attachments: null }),\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      // Clear input immediately\n      setCurrentInput(\"\");\n      \n      // Refetch messages to show the new message\n      queryClient.invalidateQueries({ queryKey: [`/api/conversations/${variables.conversationId}/messages`] });\n      \n      // Refetch after delay to catch AI response\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [`/api/conversations/${variables.conversationId}/messages`] });\n      }, 1500);\n      \n      // Update conversations list\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to send message\", variant: \"destructive\" });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (updates: Partial<User>) => {\n      const response = await fetch(\"/api/user\", {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({ title: \"Settings updated successfully\" });\n    },\n  });\n\n  // Event handlers\n  const handleNewConversation = () => {\n    createConversationMutation.mutate({\n      title: \"New Conversation\",\n    });\n  };\n\n  const handlePinConversation = (id: number) => {\n    const conversation = conversations.find((c) => c.id === id);\n    if (conversation) {\n      updateConversationMutation.mutate({\n        id,\n        updates: { isPinned: !conversation.isPinned },\n      });\n    }\n  };\n\n  const handleDeleteConversation = (id: number) => {\n    deleteConversationMutation.mutate(id);\n  };\n\n  const handleSendMessage = (text: string, files?: File[]) => {\n    if (!text.trim()) return;\n    \n    // If no active conversation, create one first\n    if (!activeConversationId) {\n      setPendingMessage(text);\n      createConversationMutation.mutate({\n        title: text.length > 50 ? text.substring(0, 50) + \"...\" : text,\n      });\n      return;\n    }\n    \n    createMessageMutation.mutate({\n      conversationId: activeConversationId,\n      content: text,\n      role: \"user\"\n    });\n  };\n\n  const handleSettingsOpen = (setting: 'ai' | 'theme' | 'tokens' | 'profile') => {\n    setSettingsOpen(true);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-white dark:bg-gray-900\">\n      {/* Sidebar */}\n      <Sidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        searchQuery={searchQuery}\n        showSearch={showSearch}\n        onSearchChange={setSearchQuery}\n        onSearchToggle={() => setShowSearch(!showSearch)}\n        onNewConversation={handleNewConversation}\n        onSelectConversation={setActiveConversationId}\n        onPinConversation={handlePinConversation}\n        onDeleteConversation={handleDeleteConversation}\n        onSettingsOpen={handleSettingsOpen}\n        isCreatingConversation={createConversationMutation.isPending}\n      />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <ChatTopBar user={user} />\n        \n        <ChatArea\n          messages={messages}\n          activeConversationId={activeConversationId}\n          onRegenerate={(messageId) => console.log('Regenerate:', messageId)}\n        />\n        \n        {activeConversationId && (\n          <PromptInput\n            value={currentInput}\n            onChange={setCurrentInput}\n            onSend={handleSendMessage}\n            disabled={createMessageMutation.isPending}\n            isLoading={createMessageMutation.isPending}\n          />\n        )}\n      </div>\n\n      {/* Settings Dialog */}\n      <SettingsDialog\n        open={settingsOpen}\n        onOpenChange={setSettingsOpen}\n        user={user || null}\n        onUserUpdate={(updates) => updateUserMutation.mutate(updates)}\n        tokenData={tokenData}\n      />\n    </div>\n  );\n};\n","size_bytes":8353},"frontend/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"frontend/src/components/Chat/AIBubble.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Download, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message } from \"@shared/schema\";\n\ninterface AIBubbleProps {\n  message: Message;\n  onCopy?: (content: string) => void;\n  onRegenerate?: () => void;\n  onDownloadDocx?: (messageId: number) => void;\n}\n\nexport function AIBubble({ \n  message, \n  onCopy, \n  onRegenerate,\n  onDownloadDocx \n}: AIBubbleProps) {\n  const { toast } = useToast();\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([message.content], { \n      type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" \n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `message-${message.id}.docx`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    onDownloadDocx?.(message.id);\n  };\n\n  return (\n    <div className=\"flex items-start mb-6\">\n      <div className=\"flex-1 max-w-[80%]\">\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl rounded-tl-md px-4 py-3 group shadow-sm\">\n          <div className=\"text-sm leading-relaxed text-gray-900 dark:text-white whitespace-pre-wrap\">\n            {message.content}\n          </div>\n          \n          <div className=\"flex items-center space-x-1 mt-3 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={handleCopy}\n            >\n              <Copy className=\"h-3 w-3 mr-1\" />\n              Copy\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={handleDownload}\n            >\n              <Download className=\"h-3 w-3 mr-1\" />\n              Download\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\"\n              onClick={onRegenerate}\n            >\n              <RotateCcw className=\"h-3 w-3 mr-1\" />\n              Regenerate\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2712},"frontend/src/components/Chat/ChatArea.tsx":{"content":"import React from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { UserBubble } from \"./UserBubble\";\nimport { AIBubble } from \"./AIBubble\";\nimport { EmptyState } from \"../Common/EmptyState\";\nimport type { Message } from \"../../shared/schema\";\n\ninterface ChatAreaProps {\n  messages: Message[];\n  activeConversationId: number | null;\n  onRegenerate: (messageId: number) => void;\n}\n\nexport function ChatArea({\n  messages,\n  activeConversationId,\n  onRegenerate,\n}: ChatAreaProps) {\n  if (!activeConversationId) {\n    return <EmptyState />;\n  }\n\n  // Filter out empty or invalid messages\n  const validMessages = messages.filter(message => \n    message && message.content && message.content.trim().length > 0\n  );\n\n  // Show empty state if no valid messages in the conversation\n  if (validMessages.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center bg-white dark:bg-gray-900\">\n        <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          <p>Start a conversation by typing a message below</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ScrollArea className=\"flex-1 bg-white dark:bg-gray-900\">\n      <div className=\"max-w-4xl mx-auto px-6 py-6\">\n        <div className=\"space-y-6\">\n          {validMessages.map((message) => (\n            message.role === \"user\" ? (\n              <UserBubble key={message.id} message={message} />\n            ) : (\n              <AIBubble \n                key={message.id} \n                message={message}\n                onRegenerate={() => onRegenerate(message.id)}\n              />\n            )\n          ))}\n        </div>\n      </div>\n    </ScrollArea>\n  );\n}","size_bytes":1693},"frontend/src/components/Chat/ChatTopBar.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { User } from \"@shared/schema\";\nimport nlLogo from \"../../assets/nl-logo.png\";\n\ninterface ChatTopBarProps {\n  user: User | null;\n}\n\nexport function ChatTopBar({ user }: ChatTopBarProps) {\n  return (\n    <header className=\"h-16 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 flex items-center justify-between px-6\">\n      <div className=\"flex items-center space-x-3\">\n        <img src={nlLogo} alt=\"NL Logo\" className=\"h-8 w-8\" />\n      </div>\n\n      <div className=\"flex items-center space-x-3\">\n        <Avatar className=\"h-8 w-8\">\n          <AvatarImage src={user?.profilePhoto || undefined} />\n          <AvatarFallback className=\"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300\">\n            {user?.username?.slice(0, 2).toUpperCase() || \"AI\"}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"text-sm\">\n          <p className=\"font-medium text-gray-900 dark:text-white\">\n            {user?.username || \"Demo User\"}\n          </p>\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            {user?.role || \"User\"}\n          </p>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1269},"frontend/src/components/Chat/PromptInput.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Send, Paperclip } from \"lucide-react\";\nimport { FilePicker } from \"../Common/FilePicker\";\n\ninterface PromptInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSend: (text: string, files?: File[]) => void;\n  disabled?: boolean;\n  isLoading?: boolean;\n  placeholder?: string;\n}\n\nexport function PromptInput({\n  value,\n  onChange,\n  onSend,\n  disabled = false,\n  isLoading = false,\n  placeholder = \"Drop Your Question\",\n}: PromptInputProps) {\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleSend = () => {\n    if (!value.trim() || disabled || isLoading) return;\n    onSend(value);\n  };\n\n  return (\n    <div className=\"border-t border-gray-200 dark:border-gray-700 bg-[#eaeaea] dark:bg-gray-800 px-6 py-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"relative bg-white dark:bg-gray-900 rounded-2xl border border-gray-300 dark:border-gray-600 shadow-sm\">\n          <div className=\"flex items-end p-4 space-x-3\">\n            <FilePicker\n              accept={[\"image/*\", \".pdf\", \".doc\", \".docx\", \".txt\"]}\n              maxSizeMB={10}\n              onFiles={(files) => console.log(\"Files selected:\", files)}\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"flex-shrink-0 h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                disabled={disabled || isLoading}\n              >\n                <Paperclip className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n              </Button>\n            </FilePicker>\n            \n            <div className=\"flex-1 relative\">\n              <Input\n                placeholder={placeholder}\n                value={value}\n                onChange={(e) => onChange(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={disabled || isLoading}\n                className=\"border-0 bg-transparent text-base px-0 py-2 focus-visible:ring-0 placeholder:text-gray-500 dark:placeholder:text-gray-400\"\n              />\n            </div>\n            \n            <Button\n              size=\"icon\"\n              onClick={handleSend}\n              disabled={!value.trim() || disabled || isLoading}\n              className=\"flex-shrink-0 h-8 w-8 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\"\n            >\n              <Send className=\"h-4 w-4 text-white\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2700},"frontend/src/components/Chat/UserBubble.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Copy, Edit, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message } from \"@shared/schema\";\n\ninterface UserBubbleProps {\n  message: Message;\n  onCopy?: (content: string) => void;\n  onEdit?: (messageId: number, text: string) => void;\n}\n\nexport function UserBubble({ message, onCopy, onEdit }: UserBubbleProps) {\n  const { toast } = useToast();\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  return (\n    <div className=\"flex items-start justify-end space-x-3 mb-6\">\n      <div className=\"flex flex-col items-end max-w-[80%]\">\n        <div className=\"bg-[#d9d9d9] dark:bg-gray-700 rounded-2xl rounded-tr-md px-4 py-3 group\">\n          <div className=\"text-sm leading-relaxed text-gray-900 dark:text-white whitespace-pre-wrap\">\n            {message.content}\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-200 dark:hover:bg-gray-600\"\n              onClick={handleCopy}\n            >\n              <Copy className=\"h-3 w-3 mr-1\" />\n              Copy\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 px-2 text-xs hover:bg-gray-200 dark:hover:bg-gray-600\"\n              onClick={() => onEdit?.(message.id, message.content)}\n            >\n              <Edit className=\"h-3 w-3 mr-1\" />\n              Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Avatar className=\"h-8 w-8 flex-shrink-0\">\n        <AvatarFallback className=\"bg-gray-100 dark:bg-gray-800\">\n          <User className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n        </AvatarFallback>\n      </Avatar>\n    </div>\n  );\n}","size_bytes":2182},"frontend/src/components/Common/EmptyState.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bot, Plus } from \"lucide-react\";\n\ninterface EmptyStateProps {\n  onNewConversation?: () => void;\n}\n\nexport function EmptyState({ onNewConversation }: EmptyStateProps) {\n  return (\n    <div className=\"flex items-center justify-center h-full bg-white dark:bg-gray-900\">\n      <div className=\"text-center max-w-md mx-auto px-6\">\n        <div className=\"mb-6\">\n          <Bot className=\"h-16 w-16 mx-auto text-gray-400 dark:text-gray-600 mb-4\" />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n          Welcome to AI Chatbot\n        </h3>\n        \n        <p className=\"text-gray-500 dark:text-gray-400 mb-6 leading-relaxed\">\n          Select a conversation from the sidebar or create a new one to start \n          chatting with AI. Ask questions, get insights, and explore possibilities.\n        </p>\n        \n        {onNewConversation && (\n          <Button onClick={onNewConversation} className=\"inline-flex items-center\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Conversation\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":1203},"frontend/src/components/Common/FilePicker.tsx":{"content":"import React, { useRef } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FilePickerProps {\n  children: React.ReactNode;\n  accept: string[];\n  maxSizeMB: number;\n  onFiles: (files: File[]) => void;\n  multiple?: boolean;\n}\n\nexport function FilePicker({ \n  children, \n  accept, \n  maxSizeMB, \n  onFiles, \n  multiple = false \n}: FilePickerProps) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    \n    // Validate file sizes\n    const validFiles = files.filter(file => {\n      const sizeMB = file.size / (1024 * 1024);\n      if (sizeMB > maxSizeMB) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than ${maxSizeMB}MB`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    if (validFiles.length > 0) {\n      onFiles(validFiles);\n    }\n\n    // Reset the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <div onClick={handleClick} className=\"cursor-pointer\">\n        {children}\n      </div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={accept.join(\",\")}\n        multiple={multiple}\n        onChange={handleFileChange}\n        className=\"hidden\"\n      />\n    </>\n  );\n}","size_bytes":1525},"frontend/src/components/Settings/AIConfiguration.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { User } from \"@shared/schema\";\n\ninterface AIConfigurationProps {\n  user: User | null;\n  onSave: (config: any) => void;\n}\n\nexport function AIConfiguration({ user, onSave }: AIConfigurationProps) {\n  const [maxTokens, setMaxTokens] = useState(\n    user?.aiPreferences?.maxTokens || 1024\n  );\n  const [personality, setPersonality] = useState<\n    \"default\" | \"robot\" | \"cynic\" | \"expert\"\n  >(user?.aiPreferences?.personality || \"default\");\n  const [addressStyle, setAddressStyle] = useState(\n    user?.aiPreferences?.addressStyle || \"casual\"\n  );\n\n  const handleSave = () => {\n    onSave({\n      maxTokens,\n      personality,\n      addressStyle,\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>AI Configuration</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"tokens\">\n            Maximum Token Limit: {maxTokens.toLocaleString()}\n          </Label>\n          <Slider\n            id=\"tokens\"\n            min={256}\n            max={8192}\n            step={64}\n            value={[maxTokens]}\n            onValueChange={(value) => setMaxTokens(value[0])}\n            className=\"w-full\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Higher values allow for longer responses but consume more resources\n          </p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"personality\">AI Personality</Label>\n          <Select \n            value={personality} \n            onValueChange={(value: \"default\" | \"robot\" | \"cynic\" | \"expert\") => \n              setPersonality(value)\n            }\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select personality\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"default\">Default - Helpful and balanced</SelectItem>\n              <SelectItem value=\"robot\">Robot - Efficient and precise</SelectItem>\n              <SelectItem value=\"cynic\">Cynic - Critical and analytical</SelectItem>\n              <SelectItem value=\"expert\">Expert - Technical and detailed</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"address\">Address Style</Label>\n          <Select value={addressStyle} onValueChange={setAddressStyle}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"How should I address you?\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"casual\">Casual</SelectItem>\n              <SelectItem value=\"formal\">Formal</SelectItem>\n              <SelectItem value=\"friendly\">Friendly</SelectItem>\n              <SelectItem value=\"professional\">Professional</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 pt-4\">\n          <Button onClick={handleSave}>Save Configuration</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3439},"frontend/src/components/Settings/ProfileForm.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { User, Mail, Briefcase, Camera } from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface ProfileFormProps {\n  user: UserType | null;\n  onSave: (profile: Partial<UserType>) => void;\n}\n\nexport function ProfileForm({ user, onSave }: ProfileFormProps) {\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [role, setRole] = useState(user?.role || \"\");\n  const [profilePhoto, setProfilePhoto] = useState(user?.profilePhoto || \"\");\n\n  const handleSave = () => {\n    onSave({\n      email: email || null,\n      role: role || null,\n      profilePhoto: profilePhoto || null,\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Profile Settings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Profile Photo Section */}\n        <div className=\"flex items-center space-x-4\">\n          <Avatar className=\"h-16 w-16\">\n            <AvatarImage src={profilePhoto || undefined} />\n            <AvatarFallback className=\"bg-primary/10\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 space-y-2\">\n            <Label htmlFor=\"photo\">Profile Photo URL</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                id=\"photo\"\n                value={profilePhoto}\n                onChange={(e) => setProfilePhoto(e.target.value)}\n                placeholder=\"https://example.com/photo.jpg\"\n                className=\"flex-1\"\n              />\n              <Button variant=\"outline\" size=\"icon\">\n                <Camera className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* User Information */}\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                value={user?.username || \"\"}\n                disabled\n                className=\"bg-muted\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Username cannot be changed\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your@email.com\"\n                  className=\"pl-9\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"role\">Role / Occupation</Label>\n            <div className=\"relative\">\n              <Briefcase className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"role\"\n                value={role}\n                onChange={(e) => setRole(e.target.value)}\n                placeholder=\"e.g., Developer, Designer, Manager\"\n                className=\"pl-9\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Account Stats */}\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <h4 className=\"font-medium mb-3\">Account Information</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Account Type:</span>\n              <p className=\"font-medium\">Free User</p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Member Since:</span>\n              <p className=\"font-medium\">\n                {new Date().toLocaleDateString()}\n              </p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Conversations:</span>\n              <p className=\"font-medium\">Active</p>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Status:</span>\n              <p className=\"font-medium text-green-600\">Online</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 pt-4\">\n          <Button variant=\"outline\">Reset</Button>\n          <Button onClick={handleSave}>Save Profile</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4905},"frontend/src/components/Settings/SettingsDialog.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AIConfiguration } from \"./AIConfiguration\";\nimport { ThemeSwitcher } from \"./ThemeSwitcher\";\nimport { TokenUsageChart } from \"./TokenUsageChart\";\nimport { ProfileForm } from \"./ProfileForm\";\nimport type { User } from \"@shared/schema\";\n\ninterface SettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onUserUpdate: (updates: Partial<User>) => void;\n  tokenData: Array<{ date: string; tokens: number }>;\n}\n\nexport function SettingsDialog({\n  open,\n  onOpenChange,\n  user,\n  onUserUpdate,\n  tokenData,\n}: SettingsDialogProps) {\n  const [activeTab, setActiveTab] = useState(\"ai-config\");\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Settings</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex space-x-2 border-b\">\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"ai-config\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"ai-config\")}\n            >\n              AI Config\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"theme\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"theme\")}\n            >\n              Theme\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"token-usage\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"token-usage\")}\n            >\n              Token Usage\n            </button>\n            <button\n              className={`px-3 py-2 text-xs font-medium transition-colors ${\n                activeTab === \"profile\"\n                  ? \"border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(\"profile\")}\n            >\n              Profile\n            </button>\n          </div>\n          \n          <div className=\"mt-6\">\n            {activeTab === \"ai-config\" && (\n              <AIConfiguration \n                user={user}\n                onSave={(config) => onUserUpdate({ aiPreferences: config })}\n              />\n            )}\n            \n            {activeTab === \"theme\" && <ThemeSwitcher />}\n            \n            {activeTab === \"token-usage\" && <TokenUsageChart data={tokenData} />}\n            \n            {activeTab === \"profile\" && (\n              <ProfileForm \n                user={user}\n                onSave={(profile) => onUserUpdate(profile)}\n              />\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3507},"frontend/src/components/Settings/ThemeSwitcher.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Sun, Moon, Monitor } from \"lucide-react\";\n\nexport function ThemeSwitcher() {\n  const { theme, setTheme, toggleTheme } = useTheme();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Theme Settings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button\n            variant={theme === \"light\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"light\")}\n            className=\"flex items-center justify-center space-x-2 h-16\"\n          >\n            <Sun className=\"h-5 w-5\" />\n            <span>Light Mode</span>\n          </Button>\n          \n          <Button\n            variant={theme === \"dark\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"dark\")}\n            className=\"flex items-center justify-center space-x-2 h-16\"\n          >\n            <Moon className=\"h-5 w-5\" />\n            <span>Dark Mode</span>\n          </Button>\n        </div>\n\n        <div className=\"border-t pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Quick Toggle</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Switch between light and dark themes instantly\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"flex items-center space-x-2\"\n            >\n              <Monitor className=\"h-4 w-4\" />\n              <span>Toggle</span>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Current theme:</strong> {theme === \"light\" ? \"Light\" : \"Dark\"} mode\n            <br />\n            Theme settings are automatically saved and will persist across sessions.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2319},"frontend/src/components/Settings/TokenUsageChart.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\ninterface TokenUsageChartProps {\n  data: Array<{ date: string; tokens: number }>;\n  from?: string;\n  to?: string;\n  onRangeChange?: (from: string, to: string) => void;\n}\n\nexport function TokenUsageChart({ data }: TokenUsageChartProps) {\n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n\n  const filteredData = data.filter((item) => {\n    const itemDate = new Date(item.date);\n    if (startDate && itemDate < startDate) return false;\n    if (endDate && itemDate > endDate) return false;\n    return true;\n  });\n\n  const totalTokens = filteredData.reduce((sum, item) => sum + item.tokens, 0);\n  const averageTokens = filteredData.length \n    ? Math.round(totalTokens / filteredData.length)\n    : 0;\n  const maxTokens = Math.max(...filteredData.map(item => item.tokens), 0);\n\n  const pieData = [\n    { name: 'Used', value: totalTokens, fill: 'hsl(var(--primary))' },\n    { name: 'Remaining', value: Math.max(10000 - totalTokens, 0), fill: 'hsl(var(--muted))' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Token Usage Analytics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            <div>\n              <Label>From Date</Label>\n              <DatePicker date={startDate} setDate={setStartDate} />\n            </div>\n            <div>\n              <Label>To Date</Label>\n              <DatePicker date={endDate} setDate={setEndDate} />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {totalTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total Tokens</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {averageTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Average</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {maxTokens.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Maximum</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"h-[300px] mb-6\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={filteredData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey=\"date\" \n                  className=\"text-xs\"\n                  tick={{ fontSize: 12 }}\n                />\n                <YAxis \n                  className=\"text-xs\"\n                  tick={{ fontSize: 12 }}\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'hsl(var(--card))',\n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '6px'\n                  }}\n                />\n                <Bar \n                  dataKey=\"tokens\" \n                  fill=\"hsl(var(--primary))\" \n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Usage Distribution</h4>\n              <div className=\"h-[200px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      dataKey=\"value\"\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Usage Insights</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Peak usage day:</span>\n                  <span className=\"font-medium\">\n                    {filteredData.length > 0 \n                      ? filteredData.reduce((max, item) => \n                          item.tokens > max.tokens ? item : max, filteredData[0]\n                        ).date\n                      : 'N/A'\n                    }\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Usage trend:</span>\n                  <span className=\"font-medium text-green-600\">\n                    {totalTokens > 0 ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Days tracked:</span>\n                  <span className=\"font-medium\">{filteredData.length}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6207},"frontend/src/components/Sidebar/ConversationActionsMenu.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Pin, Trash2 } from \"lucide-react\";\nimport type { Conversation } from \"@shared/schema\";\n\ninterface ConversationActionsMenuProps {\n  conversation: Conversation;\n  onPin: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nexport function ConversationActionsMenu({\n  conversation,\n  onPin,\n  onDelete,\n}: ConversationActionsMenuProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-gray-300 dark:hover:bg-gray-600\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <MoreVertical className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        <DropdownMenuItem onClick={() => onPin(conversation.id)}>\n          <Pin className=\"mr-2 h-4 w-4\" />\n          {conversation.isPinned ? \"Unpin\" : \"Pin\"} conversation\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => onDelete(conversation.id)}\n          className=\"text-destructive focus:text-destructive\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1567},"frontend/src/components/Sidebar/ConversationList.tsx":{"content":"import React from \"react\";\nimport { ConversationActionsMenu } from \"./ConversationActionsMenu\";\nimport { cn } from \"@/lib/utils\";\nimport type { Conversation } from \"@shared/schema\";\n\ninterface ConversationListProps {\n  conversations: Conversation[];\n  activeConversationId: number | null;\n  onSelect: (id: number) => void;\n  onPin: (id: number) => void;\n  onDelete: (id: number) => void;\n}\n\nexport function ConversationList({\n  conversations,\n  activeConversationId,\n  onSelect,\n  onPin,\n  onDelete,\n}: ConversationListProps) {\n  return (\n    <div className=\"space-y-1\">\n      {conversations.map((conversation) => (\n        <div\n          key={conversation.id}\n          className={cn(\n            \"group relative flex items-center rounded-lg px-3 py-2 cursor-pointer transition-colors\",\n            conversation.id === activeConversationId\n              ? \"bg-[#b4b4b4] dark:bg-gray-700\"\n              : \"bg-[#b4b4b48c] dark:bg-gray-800/50 hover:bg-[#b4b4b4] dark:hover:bg-gray-700\"\n          )}\n          onClick={() => onSelect(conversation.id)}\n        >\n          <div className=\"flex-1 min-w-0\">\n            <p \n              className={cn(\n                \"truncate text-base font-normal\",\n                conversation.id === activeConversationId\n                  ? \"text-black dark:text-white\"\n                  : \"text-[#0000008c] dark:text-gray-300\"\n              )}\n            >\n              {conversation.title}\n            </p>\n          </div>\n          \n          <ConversationActionsMenu\n            conversation={conversation}\n            onPin={onPin}\n            onDelete={onDelete}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":1660},"frontend/src/components/Sidebar/Sidebar.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Menu,\n  Search,\n  Plus,\n  Settings,\n  ChevronDown,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ConversationList } from \"./ConversationList\";\nimport type { Conversation } from \"@shared/schema\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface SidebarProps {\n  isCollapsed: boolean;\n  onToggle: () => void;\n  conversations: Conversation[];\n  activeConversationId: number | null;\n  searchQuery: string;\n  showSearch: boolean;\n  onSearchChange: (query: string) => void;\n  onSearchToggle: () => void;\n  onNewConversation: () => void;\n  onSelectConversation: (id: number) => void;\n  onPinConversation: (id: number) => void;\n  onDeleteConversation: (id: number) => void;\n  onSettingsOpen: (setting: 'ai' | 'theme' | 'tokens' | 'profile') => void;\n  isCreatingConversation: boolean;\n}\n\nexport function Sidebar({\n  isCollapsed,\n  onToggle,\n  conversations,\n  activeConversationId,\n  searchQuery,\n  showSearch,\n  onSearchChange,\n  onSearchToggle,\n  onNewConversation,\n  onSelectConversation,\n  onPinConversation,\n  onDeleteConversation,\n  onSettingsOpen,\n  isCreatingConversation,\n}: SidebarProps) {\n  const pinnedConversations = conversations.filter((c) => c.isPinned);\n  const recentConversations = conversations.filter((c) => !c.isPinned);\n\n  const filteredPinned = pinnedConversations.filter((conv) =>\n    conv.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  \n  const filteredRecent = recentConversations.filter((conv) =>\n    conv.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <aside\n      className={cn(\n        \"flex flex-col bg-[#e6e6e6] dark:bg-gray-900 border-r border-gray-300 dark:border-gray-700 transition-all duration-300\",\n        isCollapsed ? \"w-16\" : \"w-80\"\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-300 dark:border-gray-700\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onToggle}\n          className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n        >\n          <Menu className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n        </Button>\n        \n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onSearchToggle}\n              className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n            >\n              <Search className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onNewConversation}\n              disabled={isCreatingConversation}\n              className=\"h-8 w-8 p-0 hover:bg-gray-200 dark:hover:bg-gray-800\"\n            >\n              <Plus className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Search */}\n      {!isCollapsed && showSearch && (\n        <div className=\"p-4 border-b border-gray-300 dark:border-gray-700\">\n          <Input\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm\"\n          />\n        </div>\n      )}\n\n      {/* New Conversation Button */}\n      {!isCollapsed && !showSearch && (\n        <div className=\"p-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={onNewConversation}\n            disabled={isCreatingConversation}\n            className=\"w-full justify-start text-left h-auto py-2 px-3 hover:bg-gray-200 dark:hover:bg-gray-800\"\n          >\n            <Plus className=\"h-6 w-6 mr-3 text-gray-700 dark:text-gray-300\" />\n            <span className=\"text-lg font-normal text-gray-700 dark:text-gray-300\">\n              New Conversation\n            </span>\n          </Button>\n        </div>\n      )}\n\n      {/* Conversations */}\n      {!isCollapsed && (\n        <div className=\"flex-1 px-4\">\n          <h2 className=\"text-base font-medium text-gray-600 dark:text-gray-400 mb-3\">\n            Conversations\n          </h2>\n          \n          <ScrollArea className=\"flex-1 -mx-1\">\n            <div className=\"space-y-3\">\n              {/* Pinned Section */}\n              {filteredPinned.length > 0 && (\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <ChevronDown className=\"h-4 w-4 text-gray-500 mr-1\" />\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Pinned\n                    </span>\n                  </div>\n                  <ConversationList\n                    conversations={filteredPinned}\n                    activeConversationId={activeConversationId}\n                    onSelect={onSelectConversation}\n                    onPin={onPinConversation}\n                    onDelete={onDeleteConversation}\n                  />\n                </div>\n              )}\n\n              {/* Recent Section */}\n              {filteredRecent.length > 0 && (\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <ChevronDown className=\"h-4 w-4 text-gray-500 mr-1\" />\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Recent\n                    </span>\n                  </div>\n                  <ConversationList\n                    conversations={filteredRecent}\n                    activeConversationId={activeConversationId}\n                    onSelect={onSelectConversation}\n                    onPin={onPinConversation}\n                    onDelete={onDeleteConversation}\n                  />\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      )}\n\n      {/* Settings */}\n      <div className=\"p-4 border-t border-gray-300 dark:border-gray-700\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              size={isCollapsed ? \"icon\" : \"default\"} \n              className={cn(\n                \"hover:bg-gray-200 dark:hover:bg-gray-800\",\n                isCollapsed ? \"h-8 w-8 p-0\" : \"w-full justify-start\"\n              )}\n            >\n              <Settings className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n              {!isCollapsed && <span className=\"ml-2 text-lg font-normal\">Settings</span>}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuItem onClick={() => onSettingsOpen('ai')}>\n              AI Configuration\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('theme')}>\n              Theme\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('tokens')}>\n              Token Usage\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onSettingsOpen('profile')}>\n              Profile\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </aside>\n  );\n}","size_bytes":7577},"frontend/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"frontend/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"frontend/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"frontend/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/src/components/ui/avatar.tsx":{"content":"\"use client\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1435},"frontend/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"frontend/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"frontend/src/components/ui/button.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1918},"frontend/src/components/ui/calendar.tsx":{"content":"import { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };","size_bytes":2584},"frontend/src/components/ui/card.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1860},"frontend/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"frontend/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"frontend/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"frontend/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"frontend/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"frontend/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"frontend/src/components/ui/conversation-item.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Pin, Edit, Trash2 } from \"lucide-react\";\nimport { type Conversation } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isActive?: boolean;\n  onClick?: () => void;\n  onPin?: (id: number) => void;\n  onRename?: (id: number) => void;\n  onDelete?: (id: number) => void;\n}\n\nexport function ConversationItem({\n  conversation,\n  isActive,\n  onClick,\n  onPin,\n  onRename,\n  onDelete,\n}: ConversationItemProps) {\n  return (\n    <div\n      className={cn(\n        \"group relative flex items-center space-x-3 rounded-lg px-3 py-2 text-sm hover:bg-muted/50 cursor-pointer transition-colors\",\n        isActive && \"bg-muted\"\n      )}\n      onClick={onClick}\n    >\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"truncate text-foreground\">{conversation.title}</p>\n          {conversation.isPinned && (\n            <Badge variant=\"secondary\" className=\"h-4 px-1\">\n              <Pin className=\"h-3 w-3\" />\n            </Badge>\n          )}\n        </div>\n      </div>\n      \n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <MoreVertical className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-48\">\n          <DropdownMenuItem onClick={() => onPin?.(conversation.id)}>\n            <Pin className=\"mr-2 h-4 w-4\" />\n            {conversation.isPinned ? \"Unpin\" : \"Pin\"} conversation\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => onRename?.(conversation.id)}>\n            <Edit className=\"mr-2 h-4 w-4\" />\n            Rename\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => onDelete?.(conversation.id)}\n            className=\"text-destructive\"\n          >\n            <Trash2 className=\"mr-2 h-4 w-4\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}","size_bytes":2472},"frontend/src/components/ui/date-picker.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DatePickerProps {\n  date?: Date;\n  setDate: (date: Date | undefined) => void;\n  placeholder?: string;\n}\n\nexport function DatePicker({ date, setDate, placeholder = \"Pick a date\" }: DatePickerProps) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":1192},"frontend/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"frontend/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"frontend/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"frontend/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"frontend/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"frontend/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"frontend/src/components/ui/input.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":779},"frontend/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"frontend/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"frontend/src/components/ui/message-item.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Copy, Edit, Download, RotateCcw, User, Bot } from \"lucide-react\";\nimport { type Message } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MessageItemProps {\n  message: Message;\n  onEdit?: (id: number) => void;\n  onCopy?: (content: string) => void;\n  onDownload?: (content: string) => void;\n  onRepeat?: (id: number) => void;\n}\n\nexport function MessageItem({\n  message,\n  onEdit,\n  onCopy,\n  onDownload,\n  onRepeat,\n}: MessageItemProps) {\n  const { toast } = useToast();\n  const isUser = message.role === \"user\";\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message.content);\n    toast({\n      title: \"Copied to clipboard\",\n      duration: 2000,\n    });\n    onCopy?.(message.content);\n  };\n\n  const handleDownload = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([message.content], { type: \"application/msword\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `message-${message.id}.docx`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    onDownload?.(message.content);\n  };\n\n  return (\n    <div className={cn(\"flex items-start space-x-3 mb-6\", isUser && \"flex-row-reverse space-x-reverse\")}>\n      <Avatar className=\"h-8 w-8 flex-shrink-0\">\n        <AvatarImage src={isUser ? undefined : \"/bot-avatar.png\"} />\n        <AvatarFallback>\n          {isUser ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n        </AvatarFallback>\n      </Avatar>\n\n      <div className={cn(\"flex-1 max-w-[80%]\", isUser && \"flex justify-end\")}>\n        <Card \n          className={cn(\n            \"group transition-all hover:shadow-md\",\n            isUser \n              ? \"bg-muted/50 dark:bg-muted/30\" \n              : \"bg-background border-border\"\n          )}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n              {message.content}\n            </div>\n            \n            <div className={cn(\n              \"flex items-center space-x-1 mt-3 opacity-0 group-hover:opacity-100 transition-opacity\",\n              isUser ? \"justify-start\" : \"justify-start\"\n            )}>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={handleCopy}\n              >\n                <Copy className=\"h-3 w-3 mr-1\" />\n                Copy\n              </Button>\n              \n              {isUser && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 px-2 text-xs\"\n                  onClick={() => onEdit?.(message.id)}\n                >\n                  <Edit className=\"h-3 w-3 mr-1\" />\n                  Edit\n                </Button>\n              )}\n              \n              {!isUser && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={handleDownload}\n                  >\n                    <Download className=\"h-3 w-3 mr-1\" />\n                    Download\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={() => onRepeat?.(message.id)}\n                  >\n                    <RotateCcw className=\"h-3 w-3 mr-1\" />\n                    Regenerate\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3934},"frontend/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"frontend/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"frontend/src/components/ui/popover.tsx":{"content":"import * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverAnchor = PopoverPrimitive.Anchor;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n","size_bytes":1305},"frontend/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"frontend/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"frontend/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"frontend/src/components/ui/scroll-area.tsx":{"content":"import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","size_bytes":1654},"frontend/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"frontend/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"frontend/src/components/ui/settings-dialogs.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { type User } from \"@shared/schema\";\nimport { DatePicker } from \"./date-picker\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\ninterface AIConfigDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onSave: (config: any) => void;\n}\n\nexport function AIConfigDialog({ open, onOpenChange, user, onSave }: AIConfigDialogProps) {\n  const [maxTokens, setMaxTokens] = useState(user?.aiPreferences?.maxTokens || 4000);\n  const [personality, setPersonality] = useState<\"default\" | \"robot\" | \"cynic\" | \"expert\">(user?.aiPreferences?.personality || \"default\");\n  const [addressStyle, setAddressStyle] = useState(user?.aiPreferences?.addressStyle || \"casual\");\n\n  const handleSave = () => {\n    onSave({\n      maxTokens,\n      personality,\n      addressStyle,\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>AI Configuration</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-6 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"tokens\">Maximum Token Limit: {maxTokens}</Label>\n            <Slider\n              id=\"tokens\"\n              min={1000}\n              max={8000}\n              step={100}\n              value={[maxTokens]}\n              onValueChange={(value) => setMaxTokens(value[0])}\n              className=\"w-full\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"personality\">AI Personality</Label>\n            <Select value={personality} onValueChange={(value: \"default\" | \"robot\" | \"cynic\" | \"expert\") => setPersonality(value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select personality\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"default\">Default</SelectItem>\n                <SelectItem value=\"robot\">Robot (Efficient & Rigid)</SelectItem>\n                <SelectItem value=\"cynic\">Cynic</SelectItem>\n                <SelectItem value=\"expert\">Expert</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"address\">How should I address you?</Label>\n            <Input\n              id=\"address\"\n              value={addressStyle}\n              onChange={(e) => setAddressStyle(e.target.value)}\n              placeholder=\"e.g., casual, formal, by name\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>Save Changes</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface ThemeDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ThemeDialog({ open, onOpenChange }: ThemeDialogProps) {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[400px]\">\n        <DialogHeader>\n          <DialogTitle>Theme Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Light Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Use light colors and backgrounds\n              </p>\n            </div>\n            <Switch\n              checked={theme === \"light\"}\n              onCheckedChange={(checked) => setTheme(checked ? \"light\" : \"dark\")}\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Dark Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Use dark colors and backgrounds\n              </p>\n            </div>\n            <Switch\n              checked={theme === \"dark\"}\n              onCheckedChange={(checked) => setTheme(checked ? \"dark\" : \"light\")}\n            />\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface TokenUsageDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  tokenData: Array<{ date: string; tokens: number }>;\n}\n\nexport function TokenUsageDialog({ open, onOpenChange, tokenData }: TokenUsageDialogProps) {\n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n\n  const filteredData = tokenData.filter(item => {\n    const itemDate = new Date(item.date);\n    if (startDate && itemDate < startDate) return false;\n    if (endDate && itemDate > endDate) return false;\n    return true;\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Token Usage</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label>Start Date</Label>\n              <DatePicker date={startDate} setDate={setStartDate} />\n            </div>\n            <div className=\"flex-1\">\n              <Label>End Date</Label>\n              <DatePicker date={endDate} setDate={setEndDate} />\n            </div>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Daily Token Usage</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={filteredData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"tokens\" fill=\"hsl(var(--primary))\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">\n                  {filteredData.reduce((sum, item) => sum + item.tokens, 0).toLocaleString()}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total Tokens</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">\n                  {filteredData.length ? Math.round(filteredData.reduce((sum, item) => sum + item.tokens, 0) / filteredData.length).toLocaleString() : 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Daily Average</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface ProfileDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: User | null;\n  onSave: (profile: Partial<User>) => void;\n}\n\nexport function ProfileDialog({ open, onOpenChange, user, onSave }: ProfileDialogProps) {\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [role, setRole] = useState(user?.role || \"\");\n  const [profilePhoto, setProfilePhoto] = useState(user?.profilePhoto || \"\");\n\n  const handleSave = () => {\n    onSave({\n      email: email || null,\n      role: role || null,\n      profilePhoto: profilePhoto || null,\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Profile Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"your@email.com\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"role\">Role/Job</Label>\n            <Input\n              id=\"role\"\n              value={role}\n              onChange={(e) => setRole(e.target.value)}\n              placeholder=\"e.g., Developer, Designer, Manager\"\n            />\n          </div>\n          \n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"photo\">Profile Photo URL</Label>\n            <Input\n              id=\"photo\"\n              value={profilePhoto}\n              onChange={(e) => setProfilePhoto(e.target.value)}\n              placeholder=\"https://example.com/photo.jpg\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>Save Changes</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10076},"frontend/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"frontend/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"frontend/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"frontend/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"frontend/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"frontend/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"frontend/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"frontend/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"frontend/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"frontend/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"frontend/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"frontend/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"frontend/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}